open Ast

%%

%name TiML

%term ID of string
    | LPAREN
    | RPAREN
    | DARROW
    | FN
    | FIX
    | LSQ
    | RSQ
    | LCUR
    | RCUR
    | CASE
    | OF
    | COLON
    | RTRI
    | LET
    | IN
    | END
    | COMMA
    | RETURN
    | ARROW
    | DDASH
    | MULT
    | PLUS
    | MU
    | INT of int
    | BAR
    | AND
    | OR
    | IFF
    | EQ
    | LE
    | VAL
    | EOF
    | FORALL
    | EXISTS
    | APPR (* dummy terminal for precedence *)
    | MAX
    | MIN
    | BOGUS of string

%nonterm start of exp
       | exp of exp
       | aexp of exp
       | ty of ty
       (* | aty of ty *)
       | idx of idx
       | sort of sort
       | bsort of bsort
       | prop of prop
       | id of id
       | exp_comma_star of exp list
       | comma_exp_star of exp list
       | abs of abs
       | bind_plus of bind list
       | bind_star of bind list
       | bind of bind
       | return_opt of (ty * idx) option
       | return of ty * idx
       | rule_bar_star of (ptrn * exp) list
       | bar_rule_star of (ptrn * exp) list
       | rule of ptrn * exp
       | ptrn of ptrn
       | id_cur_space of string list
       | id_plus of string list
       | id_star of string list
       | def_star of def list
       | def of def
       | quan of quan


%keyword FN FIX CASE OF LET IN END RETURN VAL

%pos pos

		(* %nonassoc LET *)
		(* %nonassoc RTRI *)
%nonassoc IFF
(* %right ARROW *)
%right DDASH
%right OR
%right AND
%nonassoc EQ LE
%left PLUS
%left MULT MAX MIN
%right APPR

%eop EOF
%noshift EOF
%nodefault
%verbose

%arg (reporter) : reporter

%%

start : exp (exp)

exp : aexp (aexp)
    | exp aexp (App (exp, aexp, (expleft, aexpright)))
    | exp LSQ ty RSQ (AppT (exp, ty, (expleft, tyright)))
    | exp LCUR idx RCUR (AppI (exp, idx, (expleft, idxright)))
    | exp COLON ty (Ascription (exp, ty, (expleft, tyright)))
    | exp RTRI idx (AscriptionTime (exp, idx, (expleft, idxright)))

aexp : id (Var id)
     | LPAREN exp_comma_star RPAREN (Tuple (exp_comma_star, (LPARENleft, RPARENright)))
                (* | LPAREN exp RPAREN (exp) *) (* already covered by previous one *)
     | abs bind_plus DARROW exp (Abs (abs, bind_plus, exp, (absleft, expright)))
     | CASE exp return_opt OF rule_bar_star (Case (exp, return_opt, rule_bar_star, (CASEleft, rule_bar_starright)))
     | LET def_star IN exp END (Let (def_star, exp, (LETleft, ENDright)))

ty : ty ty %prec APPR (AppTT (ty2, ty1, (ty1left, ty2right)))
   | LCUR idx RCUR ty %prec APPR (AppTI (ty, idx, (LCURleft, tyright)))
   | ty DDASH idx ARROW ty (Arrow (ty1, idx, ty2, (ty1left, ty2right)))
   | ty MULT ty (Prod (ty1, ty2, (ty1left, ty2right)))
   | ty PLUS ty (Sum (ty1, ty2, (ty1left, ty2right)))
(* aty : *)
   | id (VarT id)
   | quan bind_plus COMMA ty (Quan (quan, bind_plus, ty, (quanleft, tyright)))
   | MU ID bind_star COMMA ty (Recur (ID, bind_star, ty, (MUleft, tyright)))
   | LPAREN ty RPAREN (ty)

idx : id (VarI id)
    | INT (Tint (INT, (INTleft, INTright)))
    | idx PLUS idx (Tadd (idx1, idx2, (idx1left, idx2right)))
    | idx MULT idx (Tmult (idx1, idx2, (idx1left, idx2right)))
    | idx MAX idx (Tmax (idx1, idx2, (idx1left, idx2right)))
    | idx MIN idx (Tmin (idx1, idx2, (idx1left, idx2right)))
    | LPAREN RPAREN (TTI (LPARENleft, RPARENright))
    | LPAREN idx RPAREN (idx)

sort : bsort (Basic bsort)
     | LCUR id COLON bsort BAR prop RCUR (Subset (bsort, id, prop, (LCURleft, RCURright)))

bsort : id (id)

prop : id (Pconst id)
     | prop AND prop (And (prop1, prop2, (prop1left, prop2right)))
     | prop OR prop (Or (prop1, prop2, (prop1left, prop2right)))
     | prop ARROW prop (Imply (prop1, prop2, (prop1left, prop2right)))
     | prop IFF prop (Iff (prop1, prop2, (prop1left, prop2right)))
     | idx EQ idx (Eq (idx1, idx2, (idx1left, idx2right)))
     | idx LE idx (TimeLe (idx1, idx2, (idx1left, idx2right)))

id : ID ((ID, (IDleft, IDright)))

exp_comma_star : exp comma_exp_star (exp :: comma_exp_star)
	       | ([])

comma_exp_star : COMMA exp comma_exp_star (exp :: comma_exp_star)
	       | ([])

abs : FN (Fn)
    | FIX (Fix)

bind_plus : bind bind_star (bind :: bind_star)
bind_star : bind bind_star (bind :: bind_star)
	  | ([])

bind : id COLON ty (Typing (id, ty, (idleft, tyright)))
     | LSQ id RSQ (Kinding id)
     | LCUR id COLON sort RCUR (Sorting (id, sort, (LCURleft, RCURright)))
     | LPAREN bind RPAREN (bind)

return_opt : return (SOME return)
	   | (NONE)

return : RETURN ty RTRI idx ((ty, idx))

rule_bar_star : rule bar_rule_star (rule :: bar_rule_star)
	      | ([])

bar_rule_star : BAR rule bar_rule_star (rule :: bar_rule_star)
	      | ([])

rule : ptrn DARROW exp ((ptrn, exp))

ptrn : id id_cur_space id (Constr (id1, id_cur_space, id2, (id1left, id2right)))

id_cur_space : LCUR id_plus RCUR (id_plus)
	     | ([])

id_plus : ID id_star (ID :: id_star)
id_star : ID id_star (ID :: id_star)
	| ([])

def_star : def def_star (def :: def_star)
	 | ([])

def : VAL ID EQ exp (Val (ID, exp, (VALleft, expright)))

quan : FORALL (Forall)
     | EXISTS (Exists)
