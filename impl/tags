!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
'a	/Users/wayne/timl/impl/expr.sml	/^        datatype 'a bind = $/;"	t	language:SML
'a	/Users/wayne/timl/impl/expr.sml	/^        type 'a shiftable = {$/;"	t	language:SML
'body	/Users/wayne/timl/impl/expr.sml	/^        type 'body ibind = 'body bind$/;"	t	language:SML
'body	/Users/wayne/timl/impl/expr.sml	/^        type 'body tbind = 'body bind$/;"	t	language:SML
'bsort	/Users/wayne/timl/impl/expr.sml	/^type 'bsort uvar_bs = unit$/;"	t	language:SML
'bsort	/Users/wayne/timl/impl/expr.sml	/^type ('bsort, 'idx) uvar_i = unit$/;"	t	language:SML
'classifier	/Users/wayne/timl/impl/expr.sml	/^        type ('classifier, 'name, 'inner) ibinds = ('classifier, 'name, 'inner) binds$/;"	t	language:SML
'classifier	/Users/wayne/timl/impl/expr.sml	/^        type ('classifier, 'name, 'inner) tbinds = ('classifier, 'name, 'inner) binds$/;"	t	language:SML
'mtype	/Users/wayne/timl/impl/expr.sml	/^type 'mtype uvar_mt = unit$/;"	t	language:SML
'sort	/Users/wayne/timl/impl/expr.sml	/^type 'sort uvar_s = unit$/;"	t	language:SML
'var	/Users/wayne/timl/impl/expr.sml	/^        datatype ('var, 'prop) hyp = $/;"	t	language:SML
=	/Users/wayne/timl/impl/expr.sml	/^                                  val () = case ins of$/;"	v	language:SML
=	/Users/wayne/timl/impl/expr.sml	/^                                  val () = set ()$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = if is_stdlib then$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = println ""$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = println "-------------------------------------------"$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = println "-------------------------------------------"$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = println "Applying BigO solver ..."$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = println "Applying SMT solver ..."$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = println (sprintf "BigO solver generated or left $ proof obligations unproved." [str_int $ length vcs])$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = println (sprintf "SMT solver generated or left $ proof obligations unproved." [str_int $ length unsats])$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^              val () = TypeCheck.turn_off_builtin ()$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^      val () = app println $ print_result false filename (gctx_names old_gctx) gctxd$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^      val () = app println $ ["Input file(s):"] @ indent filenames$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^      val () = if null vcs then$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^      val () = println $ sprintf "Type checker generated $ proof obligations." [str_int $ length vcs]$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^      val () = println $ sprintf "Typechecking file $ ..." [filename]$/;"	v	language:SML
=	/Users/wayne/timl/impl/main.sml	/^      val () =$/;"	v	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^                        val a = f a$/;"	v	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a %* b = BinOpI (MultI, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a %+ b = BinOpI (AddI, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a %<= b = BinPred (LeP, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a %= b = BinPred (EqP, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a %>= b = BinPred (GeP, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a %@ b = BinOpI (TimeApp, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a %^ b = BinOpI (ExpNI, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a --> b = BinConn (Imply, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a <-> b = BinConn (Iff, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a \/\\ b = BinConn (And, a, b)$/;"	f	language:SML
a	/Users/wayne/timl/impl/expr.sml	/^        fun a \\\/ b = BinConn (Or, a, b)$/;"	f	language:SML
add_ctx	/Users/wayne/timl/impl/expr.sml	/^        fun add_ctx (sctxd, kctxd, cctxd, tctxd) (sctx, kctx, cctx, tctx) =$/;"	f	language:SML
add_hyp	/Users/wayne/timl/impl/expr.sml	/^        fun add_hyp h vcs = append_hyps [h] vcs$/;"	f	language:SML
add_hyp_vc	/Users/wayne/timl/impl/expr.sml	/^        fun add_hyp_vc h vc = append_hyps_vc [h] vc$/;"	f	language:SML
add_kinding	/Users/wayne/timl/impl/expr.sml	/^        fun add_kinding name (sctx, kctx, cctx, tctx) = (sctx, name :: kctx, cctx, tctx)$/;"	f	language:SML
add_sorting	/Users/wayne/timl/impl/expr.sml	/^        fun add_sorting name (sctx, kctx, cctx, tctx) = (name :: sctx, kctx, cctx, tctx)$/;"	f	language:SML
add_t	/Users/wayne/timl/impl/expr.sml	/^              fun add_t name (sctx, kctx, cctx, tctx) = (sctx, kctx, cctx, name :: tctx) $/;"	f	language:SML
add_typing	/Users/wayne/timl/impl/expr.sml	/^        fun add_typing name (sctx, kctx, cctx, tctx) = (sctx, kctx, cctx, name :: tctx)$/;"	f	language:SML
admits	/Users/wayne/timl/impl/main.sml	/^      val admits = map (fn admit => (filename, admit)) admits$/;"	v	language:SML
append_hyps	/Users/wayne/timl/impl/expr.sml	/^        fun append_hyps hs vcs = map (append_hyps_vc hs) vcs$/;"	f	language:SML
append_hyps_vc	/Users/wayne/timl/impl/expr.sml	/^        fun append_hyps_vc hs vc = mapFst (fn hs' => hs' @ hs) vc$/;"	f	language:SML
AppVar	/Users/wayne/timl/impl/expr.sml	/^        fun AppVar (x, is) = AppV (x, [], is, dummy)$/;"	f	language:SML
BaseSorts	/Users/wayne/timl/impl/expr.sml	/^structure BaseSorts = struct$/;"	r	language:SML
BaseTypes	/Users/wayne/timl/impl/expr.sml	/^structure BaseTypes = struct$/;"	r	language:SML
base_ext	/Users/wayne/timl/impl/main.sml	/^            val base_ext = splitBaseExt (#file dir_file)$/;"	v	language:SML
base_sort	/Users/wayne/timl/impl/expr.sml	/^datatype base_sort =$/;"	t	language:SML
base_type	/Users/wayne/timl/impl/expr.sml	/^datatype base_type =$/;"	t	language:SML
bigO_solver	/Users/wayne/timl/impl/main.sml	/^      fun bigO_solver vcs =$/;"	f	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                        val (binds, q) = foldl iter ([], q) binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                        val binds = rev binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                    val (binds, ctx as (sctx, kctx, cctx, tctx)) = foldl f ([], ctx) binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                    val (binds, t) = collect_UniI t$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                    val binds = (join "" o map (prefix " ")) binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                    val binds = rev binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                let val (binds, t) = collect_UniI t$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^                val binds = map f binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^              val (binds, ctx) = foldl f ([], ctx) binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^              val (binds, ctx) = str_tbinds gctx ctx binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^              val (binds, t) = collect_UniI t$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^              val binds = map f binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^              val binds = rev binds$/;"	v	language:SML
binds	/Users/wayne/timl/impl/expr.sml	/^            let val (binds, ctx) = str_tbinds gctx (ctx, []) (map SortingT binds)$/;"	v	language:SML
binds_len	/Users/wayne/timl/impl/expr.sml	/^                                 val binds_len = length $ hyps2ctx hyps$/;"	v	language:SML
bsort	/Users/wayne/timl/impl/expr.sml	/^        datatype bsort = $/;"	t	language:SML
Ccompiler-mc.error-non-exhaustive-match	/Users/wayne/timl/impl/Makefile	/^	ml-build -Ccompiler-mc.error-non-exhaustive-match=true -Ccompiler-mc.error-non-exhaustive-bind=true main.cm MicroTiMLTest.main main-image$/;"	m	language:Make
ccontext	/Users/wayne/timl/impl/expr.sml	/^        type ccontext = string list$/;"	t	language:SML
cctx	/Users/wayne/timl/impl/main.sml	/^      val cctx = map (fn (name, (_, _, core)) => (name, get_constr_inames core)) cctx$/;"	v	language:SML
changed	/Users/wayne/timl/impl/expr.sml	/^          val changed = ref false$/;"	v	language:SML
cnames	/Users/wayne/timl/impl/expr.sml	/^                      val cnames = map #1 constrs$/;"	v	language:SML
collect_AddI	/Users/wayne/timl/impl/expr.sml	/^        val collect_AddI = collect_BinOpI AddI$/;"	v	language:SML
collect_AddI_left	/Users/wayne/timl/impl/expr.sml	/^        val collect_AddI_left = collect_BinOpI_left AddI$/;"	v	language:SML
collect_And	/Users/wayne/timl/impl/expr.sml	/^        val collect_And = collect_BinConn And$/;"	v	language:SML
collect_AppI	/Users/wayne/timl/impl/expr.sml	/^        fun collect_AppI e =$/;"	f	language:SML
collect_BinConn	/Users/wayne/timl/impl/expr.sml	/^        fun collect_BinConn opr i =$/;"	f	language:SML
collect_BinOpI	/Users/wayne/timl/impl/expr.sml	/^        fun collect_BinOpI opr i =$/;"	f	language:SML
collect_BinOpI_left	/Users/wayne/timl/impl/expr.sml	/^        fun collect_BinOpI_left opr i =$/;"	f	language:SML
collect_Imply_Forall	/Users/wayne/timl/impl/expr.sml	/^                                 fun collect_Imply_Forall p =$/;"	f	language:SML
collect_MultI	/Users/wayne/timl/impl/expr.sml	/^        val collect_MultI = collect_BinOpI MultI$/;"	v	language:SML
collect_Pair	/Users/wayne/timl/impl/expr.sml	/^        fun collect_Pair e =$/;"	f	language:SML
collect_TimeAbs	/Users/wayne/timl/impl/expr.sml	/^        fun collect_TimeAbs i =$/;"	f	language:SML
collect_TimeApp	/Users/wayne/timl/impl/expr.sml	/^        val collect_TimeApp = collect_BinOpI_left TimeApp$/;"	v	language:SML
collect_Uni	/Users/wayne/timl/impl/expr.sml	/^        fun collect_Uni t =$/;"	f	language:SML
collect_UniI	/Users/wayne/timl/impl/expr.sml	/^        fun collect_UniI t =$/;"	f	language:SML
collect_Uni_UniI	/Users/wayne/timl/impl/expr.sml	/^        fun collect_Uni_UniI t =$/;"	f	language:SML
combine_AddI	/Users/wayne/timl/impl/expr.sml	/^        fun combine_AddI zero is = foldl' (fn (i, acc) => acc %+ i) zero is$/;"	f	language:SML
combine_AddI_Nat	/Users/wayne/timl/impl/expr.sml	/^        fun combine_AddI_Nat is = combine_AddI (N0 dummy) is$/;"	f	language:SML
combine_AddI_nonempty	/Users/wayne/timl/impl/expr.sml	/^        fun combine_AddI_nonempty i is = combine_AddI_Time (i :: is)$/;"	f	language:SML
combine_AddI_Time	/Users/wayne/timl/impl/expr.sml	/^        fun combine_AddI_Time is = combine_AddI (T0 dummy) is$/;"	f	language:SML
combine_And	/Users/wayne/timl/impl/expr.sml	/^        fun combine_And ps = foldl' (fn (p, acc) => acc \/\\ p) (True dummy) ps$/;"	f	language:SML
combine_Imply_Forall	/Users/wayne/timl/impl/expr.sml	/^                                 fun combine_Imply_Forall hyps conclu =$/;"	f	language:SML
combine_MultI	/Users/wayne/timl/impl/expr.sml	/^        fun combine_MultI is = foldl' (fn (i, acc) => acc %* i) (T1 dummy) is$/;"	f	language:SML
conclu	/Users/wayne/timl/impl/expr.sml	/^                                       val conclu = substx_i_p x i conclu$/;"	v	language:SML
constr	/Users/wayne/timl/impl/expr.sml	/^                    fun constr y = AppV (y, ts, is, r)$/;"	f	language:SML
constr	/Users/wayne/timl/impl/expr.sml	/^        type constr = long_id(*family*) * string list(*type argument names*) * constr_core$/;"	t	language:SML
constr_core	/Users/wayne/timl/impl/expr.sml	/^        type constr_core = (sort, string, mtype * idx list) ibinds$/;"	t	language:SML
constr_decl	/Users/wayne/timl/impl/expr.sml	/^        type constr_decl = string * constr_core * region$/;"	t	language:SML
constr_from_type	/Users/wayne/timl/impl/expr.sml	/^        fun constr_from_type t =$/;"	f	language:SML
constr_type	/Users/wayne/timl/impl/expr.sml	/^        fun constr_type VarT shiftx_long_id ((family, tnames, ibinds) : constr) = $/;"	f	language:SML
context	/Users/wayne/timl/impl/expr.sml	/^        type context = scontext * kcontext * ccontext * tcontext$/;"	t	language:SML
ctx	/Users/wayne/timl/impl/expr.sml	/^	            val ctx = (inames @ sctx, kctx, cctx, enames @ tctx)$/;"	v	language:SML
ctx	/Users/wayne/timl/impl/expr.sml	/^	            val ctx as (sctx, kctx, cctx, tctx) = (sctx, kctx, cctx, name :: tctx)$/;"	v	language:SML
ctx	/Users/wayne/timl/impl/expr.sml	/^                      val ctx = (sctx, name :: kctx, rev cnames @ cctx, tctx)$/;"	v	language:SML
ctx	/Users/wayne/timl/impl/expr.sml	/^                    val ctx = (inames @ sctx, kctx, cctx, enames @ tctx)$/;"	v	language:SML
ctx	/Users/wayne/timl/impl/expr.sml	/^                    val ctx = add_ctx ctxd ctx$/;"	v	language:SML
ctx	/Users/wayne/timl/impl/expr.sml	/^                    val ctx as (sctx, kctx, cctx, tctx) = (sctx, (rev o map fst) tnames @ kctx, cctx, tctx)$/;"	v	language:SML
ctx	/Users/wayne/timl/impl/expr.sml	/^                val ctx = sel ctx$/;"	v	language:SML
ctx'	/Users/wayne/timl/impl/expr.sml	/^	        val ctx' = (inames @ sctx, kctx, cctx, enames @ tctx)$/;"	v	language:SML
ctx'	/Users/wayne/timl/impl/expr.sml	/^                    val ctx' = (name :: sctx, kctx, cctx, tctx)$/;"	v	language:SML
ctx'	/Users/wayne/timl/impl/expr.sml	/^                    val ctx' as (sctx', kctx', cctx', _) = (sctx, (rev o map fst) tnames @ kctx, cctx, tctx)$/;"	v	language:SML
ctxn	/Users/wayne/timl/impl/expr.sml	/^                                       val ctxn = map fst $ hyps2ctx hyps$/;"	v	language:SML
ctx_ret	/Users/wayne/timl/impl/expr.sml	/^                    val ctx_ret = ctx$/;"	v	language:SML
d	/Users/wayne/timl/impl/expr.sml	/^                        val d = on_i q d$/;"	v	language:SML
d	/Users/wayne/timl/impl/expr.sml	/^                    val d = str_i gctx sctx d$/;"	v	language:SML
d	/Users/wayne/timl/impl/expr.sml	/^                  val d = case hyp of$/;"	v	language:SML
datatype_def	/Users/wayne/timl/impl/expr.sml	/^        type datatype_def = string * string list * sort list * constr_decl list * region$/;"	t	language:SML
dec	/Users/wayne/timl/impl/expr.sml	/^		          val (dec, m') = f_dec (x + m) n dec$/;"	v	language:SML
decl	/Users/wayne/timl/impl/expr.sml	/^		          val (decl, q) = on_decl q decl$/;"	v	language:SML
decl	/Users/wayne/timl/impl/expr.sml	/^             and decl =$/;"	t	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^	            val (decls, q) = foldl g ([], q) decls$/;"	v	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^	            val decls = rev decls$/;"	v	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^                        val (decls, m) = f_decls x n decls$/;"	v	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^                        val (decls, m) = f_decls x n decls$/;"	v	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^                    val (decls, ctx') = str_decls gctx ctx' decls$/;"	v	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^                    val (decls, ctx) = str_decls gctx ctx decls$/;"	v	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^              val (decls, ctx) = foldl f ([], ctx) decls$/;"	v	language:SML
decls	/Users/wayne/timl/impl/expr.sml	/^              val decls = rev decls$/;"	v	language:SML
decorate_var	/Users/wayne/timl/impl/expr.sml	/^        fun decorate_var eia s = (if eia then "@" else "") ^ s$/;"	f	language:SML
decs	/Users/wayne/timl/impl/expr.sml	/^		        val (decs, m) = f_decls x n decs$/;"	v	language:SML
decs	/Users/wayne/timl/impl/expr.sml	/^		        val (decs, q) = on_decls q decs$/;"	v	language:SML
decs	/Users/wayne/timl/impl/expr.sml	/^	            val (decs, m) = foldl g ([], 0) decs$/;"	v	language:SML
decs	/Users/wayne/timl/impl/expr.sml	/^	            val decs = rev decs$/;"	v	language:SML
def	/Users/wayne/timl/impl/expr.sml	/^                            fun def () = try_forget (forget_i_p 0 1) p$/;"	f	language:SML
def	/Users/wayne/timl/impl/expr.sml	/^                      fun def () = BinConn (opr, passp p1, passp p2) $/;"	f	language:SML
def	/Users/wayne/timl/impl/expr.sml	/^                      fun def () = BinOpI (opr, passi i1, passi i2)$/;"	f	language:SML
def	/Users/wayne/timl/impl/expr.sml	/^                      fun def () = BinPred (opr, passi i1, passi i2)$/;"	f	language:SML
def	/Users/wayne/timl/impl/expr.sml	/^                      fun def () = Quan (q, bs, Bind (name, passp p), r_all)$/;"	f	language:SML
default	/Users/wayne/timl/impl/expr.sml	/^                    fun default () = sprintf "{ $ : $ | $ }" [name, str_bs bs, str_p gctx (name :: ctx) p]$/;"	f	language:SML
default_idx	/Users/wayne/timl/impl/expr.sml	/^                            fun default_idx b =$/;"	f	language:SML
default_time_fun	/Users/wayne/timl/impl/expr.sml	/^                            fun default_time_fun n =$/;"	f	language:SML
dir	/Users/wayne/timl/impl/main.sml	/^      val (dir, base, ext) = splitDirFileExt filename$/;"	v	language:SML
dir_file	/Users/wayne/timl/impl/main.sml	/^            val dir_file = splitDirFile filename$/;"	v	language:SML
do_forget	/Users/wayne/timl/impl/expr.sml	/^              fun do_forget hyp x =$/;"	f	language:SML
do_shift	/Users/wayne/timl/impl/expr.sml	/^              fun do_shift hyp (p as (y, hyps)) =$/;"	f	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^	            val e = str_e ctx e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                        val e = f (add_t (length tnames) q) e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                        val e = f (x + 1 + m) n e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                        val e = f q e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                        val e = f q e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                        val e = f q e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                    val e = str_e gctx ctx e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                    val e = str_e gctx ctx' e$/;"	v	language:SML
e	/Users/wayne/timl/impl/expr.sml	/^                  val (e, is) = collect_AppI e$/;"	v	language:SML
E	/Users/wayne/timl/impl/main.sml	/^structure E = NamefulExpr$/;"	r	language:SML
eq_bs	/Users/wayne/timl/impl/expr.sml	/^        fun eq_bs bs bs' =$/;"	f	language:SML
eq_i	/Users/wayne/timl/impl/expr.sml	/^        fun eq_i i i' =$/;"	f	language:SML
eq_id	/Users/wayne/timl/impl/expr.sml	/^        fun eq_id ((x, _), (x', _)) =$/;"	f	language:SML
eq_long_id	/Users/wayne/timl/impl/expr.sml	/^        fun eq_long_id ((m, x), (m', x')) =$/;"	f	language:SML
eq_option	/Users/wayne/timl/impl/expr.sml	/^        fun eq_option eq (a, a') =$/;"	f	language:SML
eq_p	/Users/wayne/timl/impl/expr.sml	/^        fun eq_p p p' =$/;"	f	language:SML
eq_quan	/Users/wayne/timl/impl/expr.sml	/^        fun eq_quan q q' =$/;"	f	language:SML
eq_uvar_i	/Users/wayne/timl/impl/expr.sml	/^fun eq_uvar_i (_, _) = false$/;"	f	language:SML
eq_v	/Users/wayne/timl/impl/expr.sml	/^fun eq_v (x : var, y) = x = y$/;"	f	language:SML
eq_v	/Users/wayne/timl/impl/expr.sml	/^fun eq_v (x : var, y) = x = y$/;"	f	language:SML
Error	/Users/wayne/timl/impl/expr.sml	/^              exception Error$/;"	e	language:SML
Error	/Users/wayne/timl/impl/expr.sml	/^        exception Error of string$/;"	e	language:SML
Error	/Users/wayne/timl/impl/main.sml	/^exception Error of string$/;"	e	language:SML
es	/Users/wayne/timl/impl/expr.sml	/^                    val es = collect_Pair e$/;"	v	language:SML
exp	/Users/wayne/timl/impl/expr.sml	/^                            fun exp i n =$/;"	f	language:SML
expr	/Users/wayne/timl/impl/expr.sml	/^        datatype expr =$/;"	t	language:SML
ExprFun	/Users/wayne/timl/impl/expr.sml	/^functor ExprFun (structure Var : VAR structure UVar : UVAR) = struct$/;"	c	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^                    fun f (bind, (binds, ctx as (sctx, kctx, cctx, tctx))) =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^                fun f bind = case bind of SortingT p => p | _ => raise Impossible "str_tbinds shouldn't return Kinding"$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f (bind, (acc, (sctx, kctx))) =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f (decl, (acc, ctx)) =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f bind =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f q b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f q b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^              fun f x n b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^          fun f x v (b : mtype) : mtype =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^          fun f x v b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^          fun f x v b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^          fun f x v b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^          fun f x v b =$/;"	f	language:SML
f	/Users/wayne/timl/impl/expr.sml	/^          fun f x v b =$/;"	f	language:SML
filenames	/Users/wayne/timl/impl/main.sml	/^              val filenames = List.filter (fn s => not (String.isPrefix "(*" s andalso String.isSuffix "*)" s)) filenames$/;"	v	language:SML
filenames	/Users/wayne/timl/impl/main.sml	/^              val filenames = List.filter (fn s => s <> "") filenames$/;"	v	language:SML
filenames	/Users/wayne/timl/impl/main.sml	/^              val filenames = map (joinDirFileCurried dir) filenames$/;"	v	language:SML
filenames	/Users/wayne/timl/impl/main.sml	/^              val filenames = map trim filenames$/;"	v	language:SML
filenames	/Users/wayne/timl/impl/main.sml	/^              val filenames = read_lines filename$/;"	v	language:SML
FILES	/Users/wayne/timl/impl/Makefile	/^FILES = \\$/;"	m	language:Make
find_hyp	/Users/wayne/timl/impl/expr.sml	/^        fun find_hyp forget shift pred x hyps =$/;"	f	language:SML
find_var	/Users/wayne/timl/impl/expr.sml	/^                                       fun find_var (i1, i2) =$/;"	f	language:SML
foldl_hyps	/Users/wayne/timl/impl/expr.sml	/^                                       fun foldl_hyps f hyps =$/;"	f	language:SML
foldr_hyps	/Users/wayne/timl/impl/expr.sml	/^                                 fun foldr_hyps shift1 shift2 f init hyps =$/;"	f	language:SML
fold_ibinds	/Users/wayne/timl/impl/expr.sml	/^        val fold_ibinds = fold_binds$/;"	v	language:SML
ForgetError	/Users/wayne/timl/impl/expr.sml	/^        exception ForgetError of int * string$/;"	e	language:SML
forget_above_i_i	/Users/wayne/timl/impl/expr.sml	/^        fun forget_above_i_i x b = forget_i_i x 100000000 b$/;"	f	language:SML
forget_e_e	/Users/wayne/timl/impl/expr.sml	/^        fun forget_e_e x n b = on_e_e forget_v x n b$/;"	f	language:SML
forget_i_i	/Users/wayne/timl/impl/expr.sml	/^        fun forget_i_i x n b = on_i_i forget_v (forget_i_UVarI shiftx_i_i ForgetError) x n b$/;"	f	language:SML
forget_i_mt	/Users/wayne/timl/impl/expr.sml	/^        fun forget_i_mt x n b = on_i_mt forget_i_i forget_i_s (forget_i_UVar shiftx_i_mt shiftx_t_mt ForgetError) x n b$/;"	f	language:SML
forget_i_p	/Users/wayne/timl/impl/expr.sml	/^        fun forget_i_p x n b = on_i_p forget_i_i x n b$/;"	f	language:SML
forget_i_s	/Users/wayne/timl/impl/expr.sml	/^        fun forget_i_s x n b = on_i_s forget_i_p (forget_i_UVarS shiftx_i_s ForgetError) x n b$/;"	f	language:SML
forget_i_t	/Users/wayne/timl/impl/expr.sml	/^        fun forget_i_t x n b = on_i_t forget_i_mt x n b$/;"	f	language:SML
forget_i_UVar	/Users/wayne/timl/impl/expr.sml	/^fun forget_i_UVar _ _ _ UVar _ _ _ a = UVar a$/;"	f	language:SML
forget_i_UVarI	/Users/wayne/timl/impl/expr.sml	/^fun forget_i_UVarI _ _ UVarI _ _ _ a = UVarI a$/;"	f	language:SML
forget_i_UVarS	/Users/wayne/timl/impl/expr.sml	/^fun forget_i_UVarS _ _ UVarS _ _ _ a = UVarS a $/;"	f	language:SML
forget_m_i	/Users/wayne/timl/impl/expr.sml	/^        fun forget_m_i x n b = on_m_i forget_v x n b$/;"	f	language:SML
forget_m_mt	/Users/wayne/timl/impl/expr.sml	/^        fun forget_m_mt x n b = on_m_mt forget_v forget_m_i forget_m_s x n b$/;"	f	language:SML
forget_m_p	/Users/wayne/timl/impl/expr.sml	/^        fun forget_m_p x n b = on_m_p forget_m_i x n b$/;"	f	language:SML
forget_m_s	/Users/wayne/timl/impl/expr.sml	/^        fun forget_m_s x n b = on_m_s forget_m_p x n b$/;"	f	language:SML
forget_m_t	/Users/wayne/timl/impl/expr.sml	/^        fun forget_m_t x n b = on_m_t forget_m_mt x n b$/;"	f	language:SML
forget_t_mt	/Users/wayne/timl/impl/expr.sml	/^        fun forget_t_mt x n b = on_t_mt forget_v (forget_t_UVar shiftx_i_mt shiftx_t_mt ForgetError) x n b$/;"	f	language:SML
forget_t_t	/Users/wayne/timl/impl/expr.sml	/^        fun forget_t_t x n b = on_t_t forget_t_mt x n b$/;"	f	language:SML
forget_t_UVar	/Users/wayne/timl/impl/expr.sml	/^fun forget_t_UVar _ _ _ UVar _ _ _ a = UVar a$/;"	f	language:SML
forget_v	/Users/wayne/timl/impl/expr.sml	/^        val forget_v = forget_v ForgetError$/;"	v	language:SML
forget_v	/Users/wayne/timl/impl/expr.sml	/^fun forget_v ForgetError x n y =  y$/;"	f	language:SML
forget_v	/Users/wayne/timl/impl/expr.sml	/^fun forget_v ForgetError x n y = $/;"	f	language:SML
f_dec	/Users/wayne/timl/impl/expr.sml	/^              and f_dec x n dec =$/;"	v	language:SML
f_decls	/Users/wayne/timl/impl/expr.sml	/^              and f_decls x n decs =$/;"	v	language:SML
f_rule	/Users/wayne/timl/impl/expr.sml	/^              and f_rule x n (pn, e) =$/;"	v	language:SML
f_rule	/Users/wayne/timl/impl/expr.sml	/^              and f_rule x n (pn, e) =$/;"	v	language:SML
g	/Users/wayne/timl/impl/expr.sml	/^                        fun g (bind, m) =$/;"	f	language:SML
g	/Users/wayne/timl/impl/expr.sml	/^                    fun g (dec, (acc, m)) =$/;"	f	language:SML
g	/Users/wayne/timl/impl/expr.sml	/^                    fun g (decl, (acc, m)) =$/;"	f	language:SML
g	/Users/wayne/timl/impl/expr.sml	/^              fun g (h, (hyps, ctx)) =$/;"	f	language:SML
gctx	/Users/wayne/timl/impl/main.sml	/^              val gctx = process_files gctx filenames$/;"	v	language:SML
gctx	/Users/wayne/timl/impl/main.sml	/^            val gctx = gctxd @ gctx$/;"	v	language:SML
gctx	/Users/wayne/timl/impl/main.sml	/^      val gctx =$/;"	v	language:SML
gctx'	/Users/wayne/timl/impl/main.sml	/^            val gctx' = gctx$/;"	v	language:SML
gctxd	/Users/wayne/timl/impl/main.sml	/^      val gctxd = update_gctx gctxd$/;"	v	language:SML
get_region_dec	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_dec dec =$/;"	f	language:SML
get_region_e	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_e e = $/;"	f	language:SML
get_region_i	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_i i =$/;"	f	language:SML
get_region_long_id	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_long_id (m, (_, r)) =$/;"	f	language:SML
get_region_m	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_m m =$/;"	f	language:SML
get_region_mt	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_mt t = $/;"	f	language:SML
get_region_p	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_p p = $/;"	f	language:SML
get_region_pn	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_pn pn = $/;"	f	language:SML
get_region_rule	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_rule (pn, e) = combine_region (get_region_pn pn) (get_region_e e)$/;"	f	language:SML
get_region_s	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_s s = $/;"	f	language:SML
get_region_sig	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_sig sg =$/;"	f	language:SML
get_region_t	/Users/wayne/timl/impl/expr.sml	/^        fun get_region_t t = $/;"	f	language:SML
get_v	/Users/wayne/timl/impl/expr.sml	/^                    fun get_v () =$/;"	f	language:SML
header	/Users/wayne/timl/impl/main.sml	/^      val header =$/;"	v	language:SML
hyp	/Users/wayne/timl/impl/expr.sml	/^                    val (hyp, hyps) = case hyps of hyp :: hyps => (hyp, hyps) | [] => raise Error$/;"	v	language:SML
hyps	/Users/wayne/timl/impl/expr.sml	/^                                       val (hyps, conclu) = loop ([], p)$/;"	v	language:SML
hyps	/Users/wayne/timl/impl/expr.sml	/^                                       val hyps = foldl_hyps subst_hyp hyps$/;"	v	language:SML
hyps	/Users/wayne/timl/impl/expr.sml	/^                                       val hyps = rev hyps$/;"	v	language:SML
hyps	/Users/wayne/timl/impl/expr.sml	/^                                 val (hyps, conclu) = collect_Imply_Forall p$/;"	v	language:SML
hyps	/Users/wayne/timl/impl/expr.sml	/^                                 val hyps = rev hyps$/;"	v	language:SML
hyps	/Users/wayne/timl/impl/expr.sml	/^              val (hyps, ctx) = foldr g ([], []) hyps$/;"	v	language:SML
hyps	/Users/wayne/timl/impl/expr.sml	/^              val hyps = rev hyps$/;"	v	language:SML
hyps2ctx	/Users/wayne/timl/impl/expr.sml	/^        fun hyps2ctx hs = List.mapPartial (fn h => case h of VarH (name, _) => SOME name | _ => NONE) hs$/;"	f	language:SML
i	/Users/wayne/timl/impl/expr.sml	/^                                                       val i = forget_i_i 0 n i$/;"	v	language:SML
i'	/Users/wayne/timl/impl/expr.sml	/^                              val (i', is) = case is of$/;"	v	language:SML
i'	/Users/wayne/timl/impl/expr.sml	/^                              val i' = combine_AddI_nonempty i' is$/;"	v	language:SML
i2s	/Users/wayne/timl/impl/expr.sml	/^                                   val i2s = collect_AddI i2$/;"	v	language:SML
i2s	/Users/wayne/timl/impl/expr.sml	/^                                  val i2s = collect_AddI i2$/;"	v	language:SML
id	/Users/wayne/timl/impl/expr.sml	/^        type id = var * region$/;"	t	language:SML
idx	/Users/wayne/timl/impl/expr.sml	/^        datatype idx =$/;"	t	language:SML
idx_shiftable	/Users/wayne/timl/impl/expr.sml	/^        val idx_shiftable : idx shiftable = {$/;"	v	language:SML
inames	/Users/wayne/timl/impl/expr.sml	/^                              val (inames, enames) = ptrn_names pn$/;"	v	language:SML
inames	/Users/wayne/timl/impl/expr.sml	/^                    val (inames, enames) = ptrn_names pn$/;"	v	language:SML
inames	/Users/wayne/timl/impl/expr.sml	/^                    val (inames, enames) = ptrn_names pn$/;"	v	language:SML
inames	/Users/wayne/timl/impl/expr.sml	/^                let val (inames, enames) = ptrn_names pn$/;"	v	language:SML
inames	/Users/wayne/timl/impl/expr.sml	/^              val (inames, enames) = ptrn_names pn$/;"	v	language:SML
inames	/Users/wayne/timl/impl/expr.sml	/^            let val (inames, enames) = ptrn_names pn$/;"	v	language:SML
inames'	/Users/wayne/timl/impl/expr.sml	/^                  val (inames', enames) = ptrn_names (default (TTP dummy) pn)$/;"	v	language:SML
inames1	/Users/wayne/timl/impl/expr.sml	/^                let val (inames1, enames1) = ptrn_names pn1$/;"	v	language:SML
inames2	/Users/wayne/timl/impl/expr.sml	/^                    val (inames2, enames2) = ptrn_names pn2$/;"	v	language:SML
inferred	/Users/wayne/timl/impl/expr.sml	/^                            val inferred =$/;"	v	language:SML
int2var	/Users/wayne/timl/impl/expr.sml	/^fun int2var x = raise Impossible "StringVar.int2var()"$/;"	f	language:SML
int2var	/Users/wayne/timl/impl/expr.sml	/^fun int2var x = x$/;"	f	language:SML
IntVar	/Users/wayne/timl/impl/expr.sml	/^structure IntVar = struct$/;"	r	language:SML
irrelevant	/Users/wayne/timl/impl/expr.sml	/^                                  val (irrelevant, relevant) = partitionOption (try_forget (forget_i_p 0 1)) ps$/;"	v	language:SML
is	/Users/wayne/timl/impl/expr.sml	/^                              val is = collect_AddI i$/;"	v	language:SML
is	/Users/wayne/timl/impl/expr.sml	/^                    val is = collect_AddI_left i$/;"	v	language:SML
is	/Users/wayne/timl/impl/expr.sml	/^                    val is = collect_TimeApp i$/;"	v	language:SML
is_stdlib	/Users/wayne/timl/impl/main.sml	/^              val is_stdlib = base = "stdlib"$/;"	v	language:SML
is_value	/Users/wayne/timl/impl/expr.sml	/^        fun is_value (e : expr) : bool =$/;"	f	language:SML
is_var_equals	/Users/wayne/timl/impl/expr.sml	/^                                 fun is_var_equals x p =$/;"	f	language:SML
iter	/Users/wayne/timl/impl/expr.sml	/^                                             fun iter (h, (n, acc)) =$/;"	f	language:SML
iter	/Users/wayne/timl/impl/expr.sml	/^                                       fun iter (h, (x, acc)) =$/;"	f	language:SML
iter	/Users/wayne/timl/impl/expr.sml	/^                                       fun iter (h, conclu) =$/;"	f	language:SML
iter	/Users/wayne/timl/impl/expr.sml	/^                        fun iter (bind, q) =$/;"	f	language:SML
iter	/Users/wayne/timl/impl/expr.sml	/^              fun iter p =$/;"	f	language:SML
iter	/Users/wayne/timl/impl/main.sml	/^      fun iter (bind, (prog, gctx, acc)) =$/;"	f	language:SML
iter	/Users/wayne/timl/impl/main.sml	/^      fun iter (filename, (prog, gctx, acc)) =$/;"	f	language:SML
joinDirFileCurried	/Users/wayne/timl/impl/main.sml	/^      fun joinDirFileCurried dir file = joinDirFile {dir = dir, file = file}$/;"	f	language:SML
kcontext	/Users/wayne/timl/impl/expr.sml	/^        type kcontext = string list $/;"	t	language:SML
kind	/Users/wayne/timl/impl/expr.sml	/^        datatype kind = $/;"	t	language:SML
lines	/Users/wayne/timl/impl/main.sml	/^      val lines = $/;"	v	language:SML
long_id	/Users/wayne/timl/impl/expr.sml	/^        type long_id = mod_projectible option * id$/;"	t	language:SML
lookup_module	/Users/wayne/timl/impl/expr.sml	/^fun lookup_module gctx m = (m, ([], [], [], []))$/;"	f	language:SML
lookup_module	/Users/wayne/timl/impl/expr.sml	/^fun lookup_module gctx m =$/;"	f	language:SML
loop	/Users/wayne/timl/impl/expr.sml	/^                                       fun loop (acc, p) =$/;"	f	language:SML
loop	/Users/wayne/timl/impl/expr.sml	/^              fun loop i i' =$/;"	f	language:SML
loop	/Users/wayne/timl/impl/expr.sml	/^              fun loop x hyps () =$/;"	f	language:SML
loop	/Users/wayne/timl/impl/expr.sml	/^              let fun loop a =$/;"	f	language:SML
m	/Users/wayne/timl/impl/expr.sml	/^                        val m = foldl g 0 binds$/;"	v	language:SML
m	/Users/wayne/timl/impl/expr.sml	/^                    val (m, ctxd) = lookup_module gctx m$/;"	v	language:SML
m	/Users/wayne/timl/impl/expr.sml	/^      val m = default "" (Option.map (suffix "." o fst) m)$/;"	v	language:SML
main	/Users/wayne/timl/impl/main.sml	/^fun main (prog_name, args : string list) : int = $/;"	f	language:SML
main	/Users/wayne/timl/impl/main.sml	/^fun main filenames =$/;"	f	language:SML
Main	/Users/wayne/timl/impl/main.sml	/^structure Main = struct$/;"	r	language:SML
mark	/Users/wayne/timl/impl/expr.sml	/^          fun mark a = (set (); a)$/;"	f	language:SML
mod	/Users/wayne/timl/impl/expr.sml	/^        datatype mod =$/;"	t	language:SML
ModuleUVar	/Users/wayne/timl/impl/expr.sml	/^        exception ModuleUVar of string$/;"	e	language:SML
mod_name	/Users/wayne/timl/impl/expr.sml	/^      val (mod_name, ctx) =$/;"	v	language:SML
mod_projectible	/Users/wayne/timl/impl/expr.sml	/^        type mod_projectible = id$/;"	t	language:SML
MtVar	/Users/wayne/timl/impl/expr.sml	/^        fun MtVar x = AppV (x, [], [], snd (snd x))$/;"	f	language:SML
mtype	/Users/wayne/timl/impl/expr.sml	/^        datatype mtype = $/;"	t	language:SML
mtype_shiftable	/Users/wayne/timl/impl/expr.sml	/^        val mtype_shiftable : mtype shiftable = {$/;"	v	language:SML
N0	/Users/wayne/timl/impl/expr.sml	/^        fun N0 r = ConstIN (0, r)$/;"	f	language:SML
N1	/Users/wayne/timl/impl/expr.sml	/^        fun N1 r = ConstIN (1, r)$/;"	f	language:SML
name	/Users/wayne/timl/impl/expr.sml	/^                val (name, ctx) = lookup_module gctx m$/;"	v	language:SML
name	/Users/wayne/timl/impl/expr.sml	/^                val name = name ^ "."$/;"	v	language:SML
name	/Users/wayne/timl/impl/expr.sml	/^        type name = string * region$/;"	t	language:SML
NamefulExpr	/Users/wayne/timl/impl/expr.sml	/^structure NamefulExpr = ExprFun (structure Var = StringVar structure UVar = Underscore)$/;"	r	language:SML
names	/Users/wayne/timl/impl/expr.sml	/^                    val (names, i) = collect_TimeAbs i$/;"	v	language:SML
names	/Users/wayne/timl/impl/expr.sml	/^                  val (names, i) = collect_TimeAbs i$/;"	v	language:SML
names	/Users/wayne/timl/impl/expr.sml	/^                let val (names, t) = collect_Uni t$/;"	v	language:SML
name_sorts	/Users/wayne/timl/impl/expr.sml	/^                            val (name_sorts, (t, idxs)) = unfold_ibinds ibinds$/;"	v	language:SML
name_sorts	/Users/wayne/timl/impl/expr.sml	/^                            val (name_sorts, sctx') = str_sortings gctx sctx name_sorts$/;"	v	language:SML
name_sorts	/Users/wayne/timl/impl/expr.sml	/^                            val name_sorts = map (fn (nm, s) => sprintf "$ : $" [nm, s]) name_sorts$/;"	v	language:SML
NR	/Users/wayne/timl/impl/main.sml	/^structure NR = NameResolve$/;"	r	language:SML
ns	/Users/wayne/timl/impl/expr.sml	/^              val (ns, (t, is)) = unfold_ibinds ibinds$/;"	v	language:SML
ns	/Users/wayne/timl/impl/expr.sml	/^              val (ns, t) = collect_UniI t$/;"	v	language:SML
old_gctx	/Users/wayne/timl/impl/main.sml	/^      val old_gctx = gctx$/;"	v	language:SML
on_decl	/Users/wayne/timl/impl/expr.sml	/^              and on_decl visitor decl =$/;"	v	language:SML
on_decls	/Users/wayne/timl/impl/expr.sml	/^              and on_decls visitor q decls =$/;"	v	language:SML
on_e	/Users/wayne/timl/impl/expr.sml	/^        fun on_e visitor q b =$/;"	f	language:SML
on_e_e	/Users/wayne/timl/impl/expr.sml	/^        fun on_e_e on_v =$/;"	f	language:SML
on_ibinds	/Users/wayne/timl/impl/expr.sml	/^        fun on_ibinds on_anno on_inner q ibinds =$/;"	f	language:SML
on_i_i	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_i on_v on_UVarI x n b =$/;"	f	language:SML
on_i_ibind	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_ibind f x n bind =$/;"	f	language:SML
on_i_ibinds	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_ibinds on_anno on_inner x n ibinds =$/;"	f	language:SML
on_i_kind	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_kind on_i_s x n b =$/;"	f	language:SML
on_i_mt	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_mt on_i_i on_i_s on_i_UVar x n b =$/;"	f	language:SML
on_i_p	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_p on_i_i x n b =$/;"	f	language:SML
on_i_s	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_s on_i_p on_UVarS x n b =$/;"	f	language:SML
on_i_t	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_t on_i_mt x n b =$/;"	f	language:SML
on_i_tbind	/Users/wayne/timl/impl/expr.sml	/^        fun on_i_tbind f x n bind =$/;"	f	language:SML
on_kind	/Users/wayne/timl/impl/expr.sml	/^        fun on_kind visitor q b =$/;"	f	language:SML
on_m_i	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_i on_v x n b =$/;"	f	language:SML
on_m_ibind	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_ibind f x n bind =$/;"	f	language:SML
on_m_ibinds	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_ibinds on_anno on_inner x n ibinds =$/;"	f	language:SML
on_m_kind	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_kind on_m_s x n b =$/;"	f	language:SML
on_m_long_id	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_long_id on_v x n (m, y) =$/;"	f	language:SML
on_m_mt	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_mt on_v on_m_i on_m_s x n b =$/;"	f	language:SML
on_m_p	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_p on_m_i x n b =$/;"	f	language:SML
on_m_s	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_s on_m_p x n b =$/;"	f	language:SML
on_m_t	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_t on_m_mt x n b =$/;"	f	language:SML
on_m_tbind	/Users/wayne/timl/impl/expr.sml	/^        fun on_m_tbind f x n bind =$/;"	f	language:SML
on_pn	/Users/wayne/timl/impl/expr.sml	/^        and on_pn q pn =$/;"	f	language:SML
on_s	/Users/wayne/timl/impl/expr.sml	/^              val on_s = on_s visitor$/;"	v	language:SML
on_t	/Users/wayne/timl/impl/expr.sml	/^        fun on_t visitor q b =$/;"	f	language:SML
on_t_ibind	/Users/wayne/timl/impl/expr.sml	/^        fun on_t_ibind f x n bind =$/;"	f	language:SML
on_t_ibinds	/Users/wayne/timl/impl/expr.sml	/^        fun on_t_ibinds on_anno on_inner x n ibinds =$/;"	f	language:SML
on_t_mt	/Users/wayne/timl/impl/expr.sml	/^        fun on_t_mt on_v on_t_UVar x n b =$/;"	f	language:SML
on_t_t	/Users/wayne/timl/impl/expr.sml	/^        fun on_t_t on_t_mt x n b =$/;"	f	language:SML
on_t_tbind	/Users/wayne/timl/impl/expr.sml	/^        fun on_t_tbind f x n bind =$/;"	f	language:SML
on_v_long_id	/Users/wayne/timl/impl/expr.sml	/^        fun on_v_long_id on_v x n (m, (y, r)) =$/;"	f	language:SML
p	/Users/wayne/timl/impl/expr.sml	/^                                             val p =$/;"	v	language:SML
p	/Users/wayne/timl/impl/expr.sml	/^                            val p = passp p$/;"	v	language:SML
p	/Users/wayne/timl/impl/expr.sml	/^                    val p = passp p$/;"	v	language:SML
p	/Users/wayne/timl/impl/expr.sml	/^                    val p = plugin set p$/;"	v	language:SML
p	/Users/wayne/timl/impl/expr.sml	/^              val p = str_p gctx ctx p$/;"	v	language:SML
p	/Users/wayne/timl/impl/expr.sml	/^              val p = until_unchanged iter p$/;"	v	language:SML
p	/Users/wayne/timl/impl/expr.sml	/^              val p = until_unchanged passp p$/;"	v	language:SML
passi	/Users/wayne/timl/impl/expr.sml	/^          fun passi i =$/;"	f	language:SML
passp	/Users/wayne/timl/impl/expr.sml	/^          fun passp p =$/;"	f	language:SML
pn	/Users/wayne/timl/impl/expr.sml	/^                                  val (pn, q) = on_pn q pn $/;"	v	language:SML
pn	/Users/wayne/timl/impl/expr.sml	/^                        val (pn, q) = on_pn q pn $/;"	v	language:SML
pn	/Users/wayne/timl/impl/expr.sml	/^                        val (pn, q) = on_pn q pn$/;"	v	language:SML
pn	/Users/wayne/timl/impl/expr.sml	/^                    val pn = str_pn gctx (sctx', kctx', cctx') pn$/;"	v	language:SML
pn	/Users/wayne/timl/impl/expr.sml	/^                    val pn = str_pn gctx (sctx, kctx, cctx) pn$/;"	v	language:SML
pred	/Users/wayne/timl/impl/expr.sml	/^                                   fun pred i =$/;"	f	language:SML
pred	/Users/wayne/timl/impl/expr.sml	/^                                  fun pred i =$/;"	f	language:SML
print_result	/Users/wayne/timl/impl/main.sml	/^fun print_result show_region filename old_gctxn gctx =$/;"	f	language:SML
print_unsat	/Users/wayne/timl/impl/main.sml	/^      fun print_unsat show_region filename (vc, counter) =$/;"	f	language:SML
print_unsats	/Users/wayne/timl/impl/main.sml	/^      fun print_unsats show_region filename unsats =$/;"	f	language:SML
process_file	/Users/wayne/timl/impl/main.sml	/^fun process_file (filename, gctx) =$/;"	f	language:SML
process_files	/Users/wayne/timl/impl/main.sml	/^and process_files gctx filenames =$/;"	v	language:SML
process_top_bind	/Users/wayne/timl/impl/main.sml	/^fun process_top_bind filename gctx bind =$/;"	f	language:SML
prog	/Users/wayne/timl/impl/expr.sml	/^        type prog = top_bind list$/;"	t	language:SML
prog	/Users/wayne/timl/impl/main.sml	/^      val (prog, gctx, admits) = foldl iter ([], gctx, []) prog$/;"	v	language:SML
prog	/Users/wayne/timl/impl/main.sml	/^      val (prog, gctx, admits) = process_files [] filenames$/;"	v	language:SML
prog	/Users/wayne/timl/impl/main.sml	/^      val (prog, _, _) = resolve_prog (TCgctx2NRgctx gctx) prog$/;"	v	language:SML
prog	/Users/wayne/timl/impl/main.sml	/^      val prog = elaborate_prog prog$/;"	v	language:SML
prog	/Users/wayne/timl/impl/main.sml	/^      val prog = parse_file filename$/;"	v	language:SML
prog	/Users/wayne/timl/impl/main.sml	/^      val prog = [bind]$/;"	v	language:SML
progd	/Users/wayne/timl/impl/main.sml	/^            val (progd, gctx, admits) = process_file (filename, gctx)$/;"	v	language:SML
progd	/Users/wayne/timl/impl/main.sml	/^            val (progd, gctxd, admits) = process_top_bind filename gctx' bind$/;"	v	language:SML
prop	/Users/wayne/timl/impl/expr.sml	/^        datatype prop =$/;"	t	language:SML
prop2vc	/Users/wayne/timl/impl/expr.sml	/^        fun prop2vc p =$/;"	f	language:SML
ps	/Users/wayne/timl/impl/expr.sml	/^                                  val ps = collect_And p$/;"	v	language:SML
ptrn	/Users/wayne/timl/impl/expr.sml	/^        datatype ptrn =$/;"	t	language:SML
ptrn_names	/Users/wayne/timl/impl/expr.sml	/^        fun ptrn_names pn : string list * string list =$/;"	f	language:SML
q	/Users/wayne/timl/impl/expr.sml	/^                                  val q = inc_i q$/;"	v	language:SML
q	/Users/wayne/timl/impl/expr.sml	/^                        val q = add_t (length tnames) q$/;"	v	language:SML
q	/Users/wayne/timl/impl/expr.sml	/^                        val q = inc_e q$/;"	v	language:SML
q	/Users/wayne/timl/impl/expr.sml	/^              val q = add_i (length inames) $ add_e (length enames) q$/;"	v	language:SML
q_ret	/Users/wayne/timl/impl/expr.sml	/^                        val q_ret = q$/;"	v	language:SML
r	/Users/wayne/timl/impl/expr.sml	/^                            val r = r ()$/;"	v	language:SML
r	/Users/wayne/timl/impl/expr.sml	/^                fun r () = get_region_i i$/;"	f	language:SML
r	/Users/wayne/timl/impl/expr.sml	/^                fun r () = get_region_p p$/;"	f	language:SML
r	/Users/wayne/timl/impl/main.sml	/^            val r = get_region_p $ snd vc$/;"	v	language:SML
read_lines	/Users/wayne/timl/impl/main.sml	/^              val read_lines = split_lines o read_file$/;"	v	language:SML
region_lines	/Users/wayne/timl/impl/main.sml	/^            val region_lines = if show_region then$/;"	v	language:SML
result	/Users/wayne/timl/impl/main.sml	/^      val result as ((gctxd, (* gctx *)_), (vcs, admits)) = typecheck_prog gctx prog$/;"	v	language:SML
ret	/Users/wayne/timl/impl/expr.sml	/^                                         val ret = i1 %* i2$/;"	v	language:SML
ret	/Users/wayne/timl/impl/expr.sml	/^                                         val ret =$/;"	v	language:SML
ret	/Users/wayne/timl/impl/expr.sml	/^                                       val ret = combine_Imply_Forall (rev hyps) conclu$/;"	v	language:SML
return	/Users/wayne/timl/impl/expr.sml	/^                        val return = on_return q return$/;"	v	language:SML
return	/Users/wayne/timl/impl/expr.sml	/^                        val return = on_return q return$/;"	v	language:SML
return	/Users/wayne/timl/impl/expr.sml	/^                    val return = str_return gctx (sctx, kctx) return$/;"	v	language:SML
return	/Users/wayne/timl/impl/expr.sml	/^        type return = mtype option * idx option$/;"	t	language:SML
rules	/Users/wayne/timl/impl/expr.sml	/^                        val rules = map (f_rule x n) rules$/;"	v	language:SML
runError	/Users/wayne/timl/impl/expr.sml	/^              fun runError m _ =$/;"	f	language:SML
s	/Users/wayne/timl/impl/expr.sml	/^                                  val s = on_s q s$/;"	v	language:SML
s	/Users/wayne/timl/impl/expr.sml	/^                      val s = sprintf "datatype$$ $ = $" [(join_prefix " " o map (surround "{" "}" o str_s gctx sctx) o rev) sorts, str_tnames, name, join " | " (map str_constr_decl constrs)]$/;"	v	language:SML
s	/Users/wayne/timl/impl/expr.sml	/^                  let val (s, ctx) = str_decl gctx ctx decl$/;"	v	language:SML
SBool	/Users/wayne/timl/impl/expr.sml	/^        val SBool = Basic (Base BoolSort, dummy)$/;"	v	language:SML
scontext	/Users/wayne/timl/impl/expr.sml	/^        type scontext = string list$/;"	t	language:SML
sctx	/Users/wayne/timl/impl/main.sml	/^      val (sctx, kctx, cctx, tctx) = ctx$/;"	v	language:SML
set	/Users/wayne/timl/impl/expr.sml	/^          fun set () = changed := true$/;"	f	language:SML
set_region_i	/Users/wayne/timl/impl/expr.sml	/^        fun set_region_i i r =$/;"	f	language:SML
set_region_long_id	/Users/wayne/timl/impl/expr.sml	/^        fun set_region_long_id (m, (x, _)) r = (Option.map (fn (m, _) => (m, r)) m, (x, r))$/;"	f	language:SML
set_region_p	/Users/wayne/timl/impl/expr.sml	/^        fun set_region_p p r = $/;"	f	language:SML
sgn	/Users/wayne/timl/impl/expr.sml	/^        datatype sgn =$/;"	t	language:SML
shiftx_e_e	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_e_e x n b = on_e_e shiftx_v x n b$/;"	f	language:SML
shiftx_hyp	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_hyp x n hyp =$/;"	f	language:SML
shiftx_hyps	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_hyps x n hyps =$/;"	f	language:SML
shiftx_id	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_id x n (y, r) = (shiftx_v x n y, r)$/;"	f	language:SML
shiftx_i_c	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_i_c x n ((family, tnames, ibinds) : constr) : constr =$/;"	f	language:SML
shiftx_i_i	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_i_i x n b = on_i_i shiftx_v shiftx_i_UVarI x n b$/;"	f	language:SML
shiftx_i_k	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_i_k x n b = on_i_kind shiftx_i_s x n b$/;"	f	language:SML
shiftx_i_mt	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_i_mt x n b = on_i_mt shiftx_i_i shiftx_i_s (shiftx_i_UVar shiftx_t_mt) x n b$/;"	f	language:SML
shiftx_i_p	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_i_p x n b = on_i_p shiftx_i_i x n b$/;"	f	language:SML
shiftx_i_s	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_i_s x n b = on_i_s shiftx_i_p shiftx_i_UVarS x n b$/;"	f	language:SML
shiftx_i_t	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_i_t x n b = on_i_t shiftx_i_mt x n b$/;"	f	language:SML
shiftx_i_UVar	/Users/wayne/timl/impl/expr.sml	/^fun shiftx_i_UVar _ UVar _ _ _ a = UVar a$/;"	f	language:SML
shiftx_i_UVarI	/Users/wayne/timl/impl/expr.sml	/^fun shiftx_i_UVarI UVarI _ _ _ a = UVarI a$/;"	f	language:SML
shiftx_i_UVarS	/Users/wayne/timl/impl/expr.sml	/^fun shiftx_i_UVarS UVarS _ _ _ a = UVarS a $/;"	f	language:SML
shiftx_list	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_list f x n ls = map (f x n) ls$/;"	f	language:SML
shiftx_long_id	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_long_id x n b = on_v_long_id shiftx_v x n b$/;"	f	language:SML
shiftx_m_c	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_m_c x n ((family, tnames, ibinds) : constr) : constr =$/;"	f	language:SML
shiftx_m_i	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_m_i x n b = on_m_i shiftx_v x n b$/;"	f	language:SML
shiftx_m_k	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_m_k x n b = on_m_kind shiftx_m_s x n b$/;"	f	language:SML
shiftx_m_mt	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_m_mt x n b = on_m_mt shiftx_v shiftx_m_i shiftx_m_s x n b$/;"	f	language:SML
shiftx_m_p	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_m_p x n b = on_m_p shiftx_m_i x n b$/;"	f	language:SML
shiftx_m_s	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_m_s x n b = on_m_s shiftx_m_p x n b$/;"	f	language:SML
shiftx_m_t	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_m_t x n b = on_m_t shiftx_m_mt x n b$/;"	f	language:SML
shiftx_noop	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_noop x n b = b$/;"	f	language:SML
shiftx_pair	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_pair (f, g) x n (a, b) = (f x n a, g x n b)$/;"	f	language:SML
shiftx_t_c	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_t_c x n (((m, family), tnames, ibinds) : constr) : constr =$/;"	f	language:SML
shiftx_t_mt	/Users/wayne/timl/impl/expr.sml	/^        and shiftx_t_mt x n b = on_t_mt shiftx_v (shiftx_t_UVar shiftx_i_mt) x n b$/;"	f	language:SML
shiftx_t_t	/Users/wayne/timl/impl/expr.sml	/^        fun shiftx_t_t x n b = on_t_t shiftx_t_mt x n b$/;"	f	language:SML
shiftx_t_UVar	/Users/wayne/timl/impl/expr.sml	/^fun shiftx_t_UVar _ UVar _ _ _ a = UVar a$/;"	f	language:SML
shiftx_v	/Users/wayne/timl/impl/expr.sml	/^fun shiftx_v x n y = $/;"	f	language:SML
shiftx_v	/Users/wayne/timl/impl/expr.sml	/^fun shiftx_v x n y = y$/;"	f	language:SML
shift_e_e	/Users/wayne/timl/impl/expr.sml	/^        fun shift_e_e b = shiftx_e_e 0 1 b$/;"	f	language:SML
shift_i_c	/Users/wayne/timl/impl/expr.sml	/^        fun shift_i_c b = shiftx_i_c 0 1 b$/;"	f	language:SML
shift_i_i	/Users/wayne/timl/impl/expr.sml	/^        fun shift_i_i b = shiftx_i_i 0 1 b$/;"	f	language:SML
shift_i_k	/Users/wayne/timl/impl/expr.sml	/^        fun shift_i_k b = shiftx_i_k 0 1 b$/;"	f	language:SML
shift_i_mt	/Users/wayne/timl/impl/expr.sml	/^        fun shift_i_mt b = shiftx_i_mt 0 1 b$/;"	f	language:SML
shift_i_p	/Users/wayne/timl/impl/expr.sml	/^        fun shift_i_p b = shiftx_i_p 0 1 b$/;"	f	language:SML
shift_i_s	/Users/wayne/timl/impl/expr.sml	/^        fun shift_i_s b = shiftx_i_s 0 1 b$/;"	f	language:SML
shift_i_t	/Users/wayne/timl/impl/expr.sml	/^        fun shift_i_t b = shiftx_i_t 0 1 b$/;"	f	language:SML
shift_m_c	/Users/wayne/timl/impl/expr.sml	/^        fun shift_m_c b = shiftx_m_c 0 1 b$/;"	f	language:SML
shift_m_i	/Users/wayne/timl/impl/expr.sml	/^        fun shift_m_i b = shiftx_m_i 0 1 b$/;"	f	language:SML
shift_m_k	/Users/wayne/timl/impl/expr.sml	/^        fun shift_m_k b = shiftx_m_k 0 1 b$/;"	f	language:SML
shift_m_mt	/Users/wayne/timl/impl/expr.sml	/^        fun shift_m_mt b = shiftx_m_mt 0 1 b$/;"	f	language:SML
shift_m_p	/Users/wayne/timl/impl/expr.sml	/^        fun shift_m_p b = shiftx_m_p 0 1 b$/;"	f	language:SML
shift_m_s	/Users/wayne/timl/impl/expr.sml	/^        fun shift_m_s b = shiftx_m_s 0 1 b$/;"	f	language:SML
shift_m_t	/Users/wayne/timl/impl/expr.sml	/^        fun shift_m_t b = shiftx_m_t 0 1 b$/;"	f	language:SML
shift_noop	/Users/wayne/timl/impl/expr.sml	/^        fun shift_noop n v = v$/;"	f	language:SML
shift_t_c	/Users/wayne/timl/impl/expr.sml	/^        fun shift_t_c b = shiftx_t_c 0 1 b$/;"	f	language:SML
shift_t_mt	/Users/wayne/timl/impl/expr.sml	/^        fun shift_t_mt b = shiftx_t_mt 0 1 b$/;"	f	language:SML
shift_t_t	/Users/wayne/timl/impl/expr.sml	/^        fun shift_t_t b = shiftx_t_t 0 1 b$/;"	f	language:SML
sigcontext	/Users/wayne/timl/impl/expr.sml	/^        type sigcontext = (string * context) list$/;"	t	language:SML
Simp	/Users/wayne/timl/impl/expr.sml	/^        structure Simp = struct$/;"	r	language:SML
simp_i	/Users/wayne/timl/impl/expr.sml	/^        val simp_i = until_unchanged passi$/;"	v	language:SML
simp_ibind	/Users/wayne/timl/impl/expr.sml	/^        fun simp_ibind f (Bind (name, inner)) = Bind (name, f inner)$/;"	f	language:SML
simp_mt	/Users/wayne/timl/impl/expr.sml	/^        fun simp_mt t =$/;"	f	language:SML
simp_p	/Users/wayne/timl/impl/expr.sml	/^        fun simp_p p =$/;"	f	language:SML
simp_p_with_plugin	/Users/wayne/timl/impl/expr.sml	/^        fun simp_p_with_plugin plugin p =$/;"	f	language:SML
simp_s	/Users/wayne/timl/impl/expr.sml	/^        fun simp_s s =$/;"	f	language:SML
simp_t	/Users/wayne/timl/impl/expr.sml	/^        fun simp_t t =$/;"	f	language:SML
simp_tbind	/Users/wayne/timl/impl/expr.sml	/^        fun simp_tbind f (Bind (name, inner)) = Bind (name, f inner)$/;"	f	language:SML
simp_vc	/Users/wayne/timl/impl/expr.sml	/^        fun simp_vc (ctx, ps, p, r) = (ctx, map simp_p ps, simp_p p, r)$/;"	f	language:SML
skctx	/Users/wayne/timl/impl/expr.sml	/^              val skctx = (sctx, kctx) $/;"	v	language:SML
smt_solver	/Users/wayne/timl/impl/main.sml	/^      fun smt_solver vcs =$/;"	f	language:SML
sort	/Users/wayne/timl/impl/expr.sml	/^        datatype sort =$/;"	t	language:SML
spec	/Users/wayne/timl/impl/expr.sml	/^        datatype spec =$/;"	t	language:SML
splitDirFileExt	/Users/wayne/timl/impl/main.sml	/^      fun splitDirFileExt filename =$/;"	f	language:SML
split_lines	/Users/wayne/timl/impl/main.sml	/^              val split_lines = String.tokens (fn c => c = #"\\n")$/;"	v	language:SML
stbind	/Users/wayne/timl/impl/expr.sml	/^        datatype stbind = $/;"	t	language:SML
STime	/Users/wayne/timl/impl/expr.sml	/^        val STime = Basic (Base Time, dummy)$/;"	v	language:SML
StringVar	/Users/wayne/timl/impl/expr.sml	/^structure StringVar = struct$/;"	r	language:SML
str_admit	/Users/wayne/timl/impl/main.sml	/^      fun str_admit show_region (filename, p) =$/;"	f	language:SML
str_b	/Users/wayne/timl/impl/expr.sml	/^fun str_b (s : base_sort) : string = $/;"	f	language:SML
str_bs	/Users/wayne/timl/impl/expr.sml	/^        fun str_bs (s : bsort) =$/;"	f	language:SML
str_bt	/Users/wayne/timl/impl/expr.sml	/^        fun str_bt bt =$/;"	f	language:SML
str_constr_decl	/Users/wayne/timl/impl/expr.sml	/^                      fun str_constr_decl (cname, ibinds, _) =$/;"	f	language:SML
str_decl	/Users/wayne/timl/impl/expr.sml	/^              val str_decl = str_decl gctx$/;"	v	language:SML
str_decl	/Users/wayne/timl/impl/expr.sml	/^        and str_decl gctx (ctx as (sctx, kctx, cctx, tctx)) decl =$/;"	v	language:SML
str_decls	/Users/wayne/timl/impl/expr.sml	/^        and str_decls gctx (ctx as (sctx, kctx, cctx, tctx)) decls =$/;"	v	language:SML
str_e	/Users/wayne/timl/impl/expr.sml	/^              val str_e = str_e gctx$/;"	v	language:SML
str_e	/Users/wayne/timl/impl/expr.sml	/^        fun str_e gctx (ctx as (sctx, kctx, cctx, tctx)) (e : expr) : string =$/;"	f	language:SML
str_hyps_conclu	/Users/wayne/timl/impl/expr.sml	/^        fun str_hyps_conclu gctx (hyps, p) =$/;"	f	language:SML
str_i	/Users/wayne/timl/impl/expr.sml	/^              val str_i = str_i gctx$/;"	v	language:SML
str_i	/Users/wayne/timl/impl/expr.sml	/^        fun str_i gctx ctx (i : idx) : string =$/;"	f	language:SML
str_id	/Users/wayne/timl/impl/expr.sml	/^fun str_id ctx (x, _) =$/;"	f	language:SML
str_k	/Users/wayne/timl/impl/expr.sml	/^        fun str_k gctx ctx (k : kind) : string = $/;"	f	language:SML
str_long_id	/Users/wayne/timl/impl/expr.sml	/^fun str_long_id sel gctx ctx (m, x) =$/;"	f	language:SML
str_long_id	/Users/wayne/timl/impl/expr.sml	/^fun str_long_id sel gctx ctx (m, x) =$/;"	f	language:SML
str_mt	/Users/wayne/timl/impl/expr.sml	/^              val str_mt = str_mt gctx$/;"	v	language:SML
str_mt	/Users/wayne/timl/impl/expr.sml	/^        fun str_mt gctx (ctx as (sctx, kctx)) (t : mtype) : string =$/;"	f	language:SML
str_p	/Users/wayne/timl/impl/expr.sml	/^              val str_p = str_p gctx$/;"	v	language:SML
str_p	/Users/wayne/timl/impl/expr.sml	/^        fun str_p gctx ctx p =$/;"	f	language:SML
str_pn	/Users/wayne/timl/impl/expr.sml	/^              val str_pn = str_pn gctx$/;"	v	language:SML
str_pn	/Users/wayne/timl/impl/expr.sml	/^        fun str_pn gctx (ctx as (sctx, kctx, cctx)) pn =$/;"	f	language:SML
str_return	/Users/wayne/timl/impl/expr.sml	/^        fun str_return gctx (skctx as (sctx, _)) return =$/;"	f	language:SML
str_rule	/Users/wayne/timl/impl/expr.sml	/^        and str_rule gctx (ctx as (sctx, kctx, cctx, tctx)) (pn, e) =$/;"	v	language:SML
str_s	/Users/wayne/timl/impl/expr.sml	/^              val str_s = str_s gctx$/;"	v	language:SML
str_s	/Users/wayne/timl/impl/expr.sml	/^        fun str_s gctx ctx (s : sort) : string =$/;"	f	language:SML
str_sortings	/Users/wayne/timl/impl/expr.sml	/^        fun str_sortings gctx ctx binds =$/;"	f	language:SML
str_t	/Users/wayne/timl/impl/expr.sml	/^        fun str_t gctx (ctx as (sctx, kctx)) (t : ty) : string =$/;"	f	language:SML
str_tbinds	/Users/wayne/timl/impl/expr.sml	/^        fun str_tbinds gctx ctx binds =$/;"	f	language:SML
str_tnames	/Users/wayne/timl/impl/expr.sml	/^                  let val str_tnames = (join_prefix " " o rev) tnames$/;"	v	language:SML
str_uni	/Users/wayne/timl/impl/expr.sml	/^        and str_uni gctx ctx (binds, t) =$/;"	v	language:SML
str_uvar_bs	/Users/wayne/timl/impl/expr.sml	/^fun str_uvar_bs (_ : 'a -> string) (_ : 'a uvar_bs) = "_"$/;"	f	language:SML
str_uvar_i	/Users/wayne/timl/impl/expr.sml	/^fun str_uvar_i (_ : string list -> 'idx -> string) (_ : string list) (_ : ('bsort, 'idx) uvar_i) = "_"$/;"	f	language:SML
str_uvar_mt	/Users/wayne/timl/impl/expr.sml	/^fun str_uvar_mt (_ : string list * string list -> 'mtype -> string) (_ : string list * string list) (_ : 'mtype uvar_mt) = "_"$/;"	f	language:SML
str_uvar_s	/Users/wayne/timl/impl/expr.sml	/^fun str_uvar_s (_ : string list -> 'sort -> string) (_ : string list) (_ : 'sort uvar_s) = "_"$/;"	f	language:SML
str_v	/Users/wayne/timl/impl/expr.sml	/^fun str_v ctx x : string = x$/;"	f	language:SML
str_v	/Users/wayne/timl/impl/expr.sml	/^fun str_v ctx x : string =$/;"	f	language:SML
Subst	/Users/wayne/timl/impl/expr.sml	/^        structure Subst = struct$/;"	r	language:SML
substx_i_i	/Users/wayne/timl/impl/expr.sml	/^        fun substx_i_i x (v : idx) (b : idx) : idx = f x v b$/;"	f	language:SML
substx_i_ibind	/Users/wayne/timl/impl/expr.sml	/^        fun substx_i_ibind f x (s : 'a shiftable) v bind =$/;"	f	language:SML
substx_i_mt	/Users/wayne/timl/impl/expr.sml	/^        fun substx_i_mt x (v : idx) (b : mtype) : mtype = f x v b$/;"	f	language:SML
substx_i_p	/Users/wayne/timl/impl/expr.sml	/^        fun substx_i_p x (v : idx) b = f x v b$/;"	f	language:SML
substx_i_s	/Users/wayne/timl/impl/expr.sml	/^        fun substx_i_s x (v : idx) (b : sort) : sort = f x v b$/;"	f	language:SML
substx_i_t	/Users/wayne/timl/impl/expr.sml	/^        fun substx_i_t x (v : idx) (b : ty) : ty = f x v b$/;"	f	language:SML
substx_i_tbind	/Users/wayne/timl/impl/expr.sml	/^        fun substx_i_tbind f x (s : 'a shiftable) v bind =$/;"	f	language:SML
substx_i_UVar	/Users/wayne/timl/impl/expr.sml	/^fun substx_i_UVar _ _ UVar _ _ _ a = UVar a$/;"	f	language:SML
substx_i_UVarI	/Users/wayne/timl/impl/expr.sml	/^fun substx_i_UVarI _ UVarI _ _ _ a = UVarI a$/;"	f	language:SML
substx_i_UVarS	/Users/wayne/timl/impl/expr.sml	/^fun substx_i_UVarS _ UVarS _ _ _ a = UVarS a $/;"	f	language:SML
substx_long_id	/Users/wayne/timl/impl/expr.sml	/^        fun substx_long_id (constr : long_id -> 'a) x (get_v : unit -> 'a) (long_id as (m, (y, r))) =$/;"	f	language:SML
substx_t_ibind	/Users/wayne/timl/impl/expr.sml	/^        fun substx_t_ibind f x (s : 'a shiftable) v bind =$/;"	f	language:SML
substx_t_mt	/Users/wayne/timl/impl/expr.sml	/^        fun substx_t_mt x (v : mtype) (b : mtype) : mtype = f x v b$/;"	f	language:SML
substx_t_t	/Users/wayne/timl/impl/expr.sml	/^        fun substx_t_t x (v : mtype) (b : ty) : ty =$/;"	f	language:SML
substx_t_tbind	/Users/wayne/timl/impl/expr.sml	/^        fun substx_t_tbind f x (s : 'a shiftable) v bind =$/;"	f	language:SML
substx_t_UVar	/Users/wayne/timl/impl/expr.sml	/^fun substx_t_UVar _ _ UVar _ _ _ a = UVar a$/;"	f	language:SML
substx_v	/Users/wayne/timl/impl/expr.sml	/^fun substx_v Var x v y = raise Impossible "Can't do StringVar.substx_v()"$/;"	f	language:SML
substx_v	/Users/wayne/timl/impl/expr.sml	/^fun substx_v Var x v y =$/;"	f	language:SML
subst_hyp	/Users/wayne/timl/impl/expr.sml	/^                                       fun subst_hyp n p =$/;"	f	language:SML
subst_is_mt	/Users/wayne/timl/impl/expr.sml	/^        fun subst_is_mt is t =$/;"	f	language:SML
subst_i_i	/Users/wayne/timl/impl/expr.sml	/^        fun subst_i_i v b = substx_i_i 0 v b$/;"	f	language:SML
subst_i_mt	/Users/wayne/timl/impl/expr.sml	/^        fun subst_i_mt (v : idx) (b : mtype) : mtype = substx_i_mt 0 v b$/;"	f	language:SML
subst_i_p	/Users/wayne/timl/impl/expr.sml	/^        fun subst_i_p (v : idx) (b : prop) : prop = substx_i_p 0 v b$/;"	f	language:SML
subst_i_s	/Users/wayne/timl/impl/expr.sml	/^        fun subst_i_s (v : idx) (b : sort) : sort = substx_i_s 0 v b$/;"	f	language:SML
subst_i_t	/Users/wayne/timl/impl/expr.sml	/^        fun subst_i_t (v : idx) (b : ty) : ty = substx_i_t 0 v b$/;"	f	language:SML
subst_ts_mt	/Users/wayne/timl/impl/expr.sml	/^        fun subst_ts_mt vs b =$/;"	f	language:SML
subst_t_mt	/Users/wayne/timl/impl/expr.sml	/^        fun subst_t_mt (v : mtype) (b : mtype) : mtype = substx_t_mt 0 v b$/;"	f	language:SML
subst_t_t	/Users/wayne/timl/impl/expr.sml	/^        fun subst_t_t v b =$/;"	f	language:SML
SUnit	/Users/wayne/timl/impl/expr.sml	/^        val SUnit = Basic (Base UnitSort, dummy)$/;"	v	language:SML
t	/Users/wayne/timl/impl/expr.sml	/^	      val t = Arrow (t, T0 dummy, t2)$/;"	v	language:SML
t	/Users/wayne/timl/impl/expr.sml	/^	      val t = foldr (fn ((name, s), t) => UniI (s, Bind ((name, dummy), t), dummy)) t ns$/;"	v	language:SML
t	/Users/wayne/timl/impl/expr.sml	/^	      val t = foldr (fn (name, t) => Uni (Bind ((name, dummy), t), dummy)) t tnames$/;"	v	language:SML
t	/Users/wayne/timl/impl/expr.sml	/^                        val t = on_mt q t$/;"	v	language:SML
t	/Users/wayne/timl/impl/expr.sml	/^                    val t = str_mt gctx (sctx, kctx) t$/;"	v	language:SML
t	/Users/wayne/timl/impl/expr.sml	/^              val (t, is) = case t of$/;"	v	language:SML
t	/Users/wayne/timl/impl/expr.sml	/^              val t = Mono t$/;"	v	language:SML
T0	/Users/wayne/timl/impl/expr.sml	/^        fun T0 r = ConstIT ("0.0", r)$/;"	f	language:SML
T1	/Users/wayne/timl/impl/expr.sml	/^        fun T1 r = ConstIT ("1.0", r)$/;"	f	language:SML
t2	/Users/wayne/timl/impl/expr.sml	/^	      val t2 = AppV (shiftx_long_id 0 (length tnames) family, ts, is, dummy)$/;"	v	language:SML
TC	/Users/wayne/timl/impl/main.sml	/^structure TC = TypeCheck$/;"	r	language:SML
TCctx2NRctx	/Users/wayne/timl/impl/main.sml	/^fun TCctx2NRctx (ctx : TC.context) : NR.context =$/;"	f	language:SML
TCgctx2NRgctx	/Users/wayne/timl/impl/main.sml	/^fun TCgctx2NRgctx gctx = map (mapSnd TCsgntr2NRsgntr) gctx$/;"	f	language:SML
tcontext	/Users/wayne/timl/impl/expr.sml	/^        type tcontext = string list$/;"	t	language:SML
TCsgntr2NRsgntr	/Users/wayne/timl/impl/main.sml	/^fun TCsgntr2NRsgntr (sg : TC.sgntr) : NR.sgntr =$/;"	f	language:SML
Time	/Users/wayne/timl/impl/expr.sml	/^val Time = TimeFun 0$/;"	v	language:SML
TiML	/Users/wayne/timl/impl/main.sml	/^structure TiML = struct$/;"	r	language:SML
tnames	/Users/wayne/timl/impl/expr.sml	/^                    val tnames = (join "" o map (fn nm => sprintf " [$]" [nm]) o map fst) tnames$/;"	v	language:SML
tnames	/Users/wayne/timl/impl/expr.sml	/^                    val tnames = (join "" o map (fn nm => sprintf " [$]" [nm]) o map fst) tnames$/;"	v	language:SML
tnames	/Users/wayne/timl/impl/expr.sml	/^              val (tnames, t) = collect_Uni t$/;"	v	language:SML
tnames	/Users/wayne/timl/impl/expr.sml	/^              val (tnames, t) = collect_Uni t$/;"	v	language:SML
tnames	/Users/wayne/timl/impl/expr.sml	/^              val tnames = map fst tnames$/;"	v	language:SML
tnames	/Users/wayne/timl/impl/expr.sml	/^              val tnames = map fst tnames$/;"	v	language:SML
top_bind	/Users/wayne/timl/impl/expr.sml	/^        datatype top_bind =$/;"	t	language:SML
try_forget	/Users/wayne/timl/impl/expr.sml	/^        fun try_forget f a =$/;"	f	language:SML
try_forget_p	/Users/wayne/timl/impl/expr.sml	/^                      fun try_forget_p p =$/;"	f	language:SML
ts	/Users/wayne/timl/impl/expr.sml	/^                                val (ts, is) =$/;"	v	language:SML
ts	/Users/wayne/timl/impl/expr.sml	/^                    val ts = map (f x v) ts$/;"	v	language:SML
ts	/Users/wayne/timl/impl/expr.sml	/^              val ts = (map (fn x => VarT (NONE, (x, dummy))) o rev o range o length) tnames$/;"	v	language:SML
ty	/Users/wayne/timl/impl/expr.sml	/^        datatype ty = $/;"	t	language:SML
Type	/Users/wayne/timl/impl/expr.sml	/^        val Type = ArrowK (false, 0, [])$/;"	v	language:SML
typecheck_file	/Users/wayne/timl/impl/main.sml	/^fun typecheck_file gctx filename =$/;"	f	language:SML
typing_lines	/Users/wayne/timl/impl/main.sml	/^      val typing_lines = str_gctx old_gctxn gctx$/;"	v	language:SML
Underscore	/Users/wayne/timl/impl/expr.sml	/^structure Underscore = struct$/;"	r	language:SML
UnderscoredExpr	/Users/wayne/timl/impl/expr.sml	/^structure UnderscoredExpr = ExprFun (structure Var = IntVar structure UVar = Underscore)$/;"	r	language:SML
unfold_ibinds	/Users/wayne/timl/impl/expr.sml	/^        val unfold_ibinds = unfold_binds$/;"	v	language:SML
unsats	/Users/wayne/timl/impl/main.sml	/^              val unsats = List.mapPartial id $ map (SMTSolver.smt_solver_single filename true (SOME Z3)) $ map fst $ unsats$/;"	v	language:SML
unsats	/Users/wayne/timl/impl/main.sml	/^              val unsats = List.mapPartial id $ SMTSolver.smt_solver filename true (SOME Z3) vcs$/;"	v	language:SML
unset	/Users/wayne/timl/impl/expr.sml	/^          fun unset () = changed := false$/;"	f	language:SML
until_unchanged	/Users/wayne/timl/impl/expr.sml	/^          fun until_unchanged f a = $/;"	f	language:SML
UVar	/Users/wayne/timl/impl/expr.sml	/^functor ExprFun (structure Var : VAR structure UVar : UVAR) = struct$/;"	r	language:SML
UVar	/Users/wayne/timl/impl/expr.sml	/^structure NamefulExpr = ExprFun (structure Var = StringVar structure UVar = Underscore)$/;"	r	language:SML
UVar	/Users/wayne/timl/impl/expr.sml	/^structure UnderscoredExpr = ExprFun (structure Var = IntVar structure UVar = Underscore)$/;"	r	language:SML
Var	/Users/wayne/timl/impl/expr.sml	/^functor ExprFun (structure Var : VAR structure UVar : UVAR) = struct$/;"	r	language:SML
Var	/Users/wayne/timl/impl/expr.sml	/^structure NamefulExpr = ExprFun (structure Var = StringVar structure UVar = Underscore)$/;"	r	language:SML
Var	/Users/wayne/timl/impl/expr.sml	/^structure UnderscoredExpr = ExprFun (structure Var = IntVar structure UVar = Underscore)$/;"	r	language:SML
var	/Users/wayne/timl/impl/expr.sml	/^type var = int$/;"	t	language:SML
var	/Users/wayne/timl/impl/expr.sml	/^type var = string$/;"	t	language:SML
var2int	/Users/wayne/timl/impl/expr.sml	/^fun var2int x = raise Impossible "StringVar.var2int()"$/;"	f	language:SML
var2int	/Users/wayne/timl/impl/expr.sml	/^fun var2int x = x$/;"	f	language:SML
VarT	/Users/wayne/timl/impl/expr.sml	/^        fun VarT x = AppV (x, [], [], dummy)$/;"	f	language:SML
vc	/Users/wayne/timl/impl/expr.sml	/^                    val vc = add_hyp_vc (PropH p1) vc$/;"	v	language:SML
vc	/Users/wayne/timl/impl/expr.sml	/^                    val vc = add_hyp_vc (VarH (name, (bs, r_all))) vc$/;"	v	language:SML
vc	/Users/wayne/timl/impl/expr.sml	/^                    val vc = prop2vc p$/;"	v	language:SML
vc	/Users/wayne/timl/impl/expr.sml	/^                    val vc = prop2vc p$/;"	v	language:SML
vc	/Users/wayne/timl/impl/main.sml	/^            val vc = prop2vc p$/;"	v	language:SML
vcs	/Users/wayne/timl/impl/main.sml	/^              val vcs = BigOSolver.solve_vcs vcs$/;"	v	language:SML
vcs	/Users/wayne/timl/impl/main.sml	/^      val vcs = bigO_solver vcs$/;"	v	language:SML
vcs	/Users/wayne/timl/impl/main.sml	/^      val vcs = concatMap VC.simp_vc_vcs vcs$/;"	v	language:SML
vcs	/Users/wayne/timl/impl/main.sml	/^      val vcs = smt_solver vcs$/;"	v	language:SML
x	/Users/wayne/timl/impl/expr.sml	/^                                             val x = var2int $ forget_v 0 n (int2var x)$/;"	v	language:SML
x	/Users/wayne/timl/impl/expr.sml	/^                                       val x = binds_len$/;"	v	language:SML
x	/Users/wayne/timl/impl/expr.sml	/^                    val x = do_forget hyp x$/;"	v	language:SML
x	/Users/wayne/timl/impl/expr.sml	/^      val x = str_id ctx x$/;"	v	language:SML
x	/Users/wayne/timl/impl/expr.sml	/^      val x = str_v ctx (fst x)$/;"	v	language:SML
y	/Users/wayne/timl/impl/expr.sml	/^              val y =$/;"	v	language:SML
_	/Users/wayne/timl/impl/expr.sml	/^                                  val (_, enames) = ptrn_names pn $/;"	v	language:SML
_	/Users/wayne/timl/impl/expr.sml	/^                        val (_, enames) = ptrn_names pn $/;"	v	language:SML
_	/Users/wayne/timl/impl/expr.sml	/^                        val _ = unset ()$/;"	v	language:SML
_	/Users/wayne/timl/impl/expr.sml	/^                    val (_, enames) = ptrn_names pn $/;"	v	language:SML
_	/Users/wayne/timl/impl/expr.sml	/^                    val (_, enames) = ptrn_names pn $/;"	v	language:SML
_	/Users/wayne/timl/impl/main.sml	/^      val _ =$/;"	v	language:SML
_	/Users/wayne/timl/impl/mlton-main.sml	/^val _ = MicroTiMLTest.main (CommandLine.name (), CommandLine.arguments ())$/;"	v	language:SML
