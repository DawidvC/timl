datatype {Time} 'a ilist =
         NilI of unit -> {0} 'a ilist
         | ConsI of {n' : Time} 'a * {n'} 'a ilist -> {n' + 1} 'a ilist
                                                               
val map = 
 fn ['a] ['b] {m : Time} (f : 'a -- m -> 'b) =>
    fix (map : forall {n : Time}, {n} 'a ilist -- (m + 2) * n -> {n} 'b ilist) {n : Time} (ls : {n} 'a ilist) =>
    case ls return {n} 'b ilist |> (m + 2) * n of
        NilI _ => NilI ['b] ()
      | ConsI {n'} x_xs => ConsI ['b] {n'} (f (fst x_xs), map {n'} (snd x_xs))

val n = 77
