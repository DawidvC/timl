(anchor ?278 (((?278 []) <== (fn m n => ((($ m) * ($ n)) * (log2 ($ n))))) /\ ((forall (T : Fun 2) ((((T <== (fn m n => ((($ m) * ($ n)) * (log2 ($ n))))) -> (((T = (?278 [(0, 1)])) -> ((forall (m : Nat) (((forall (n : Nat) ((((0 = n) -> True) /\ ((forall (__n' : Nat) (((((__n' + 1) = n) -> (((0 = __n') -> True) /\ True)) /\ True))) /\ ((forall (__n' : Nat) (((((__n' + 1) = n) -> ((forall (__n' : Nat) (((((__n' + 1) = __n') -> True) /\ True))) /\ True)) /\ True))) /\ (((0 = n) -> ((0.0 <= (T m n)) /\ True)) /\ ((forall (__n' : Nat) (((((__n' + 1) = n) -> (((0 = __n') -> ((0.0 <= (T m n)) /\ True)) /\ True)) /\ True))) /\ ((forall (__n' : Nat) (((((__n' + 1) = n) -> ((forall (__n' : Nat) (((((__n' + 1) = __n') -> ((((ceil (($ n) / 2)) + (floor (($ n) / 2))) = n) /\ (((1.0 + (T_split n) + (1.0 + 1.0 + 1.0 + (T m (ceil (($ n) / 2))) + 1.0 + 1.0 + (T m (floor (($ n) / 2))) + 1.0 + (T_merge m ((ceil (($ n) / 2)) + (floor (($ n) / 2)))))) <= (T m n)) /\ (((T m n) <= (T m n)) /\ True)))) /\ True))) /\ True)) /\ True))) /\ (((T m n) <= (T m n)) /\ True))))))))) /\ True))) /\ True)) /\ True)) /\ True))) /\ True)))
