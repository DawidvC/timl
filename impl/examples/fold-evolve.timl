val ['a 'b] foldl =
 fn {m : Nat} (f : 'a * 'b -- $m --> 'b) =>
    let
        fun foldl {n : Nat} (y : (* _ *)'b, xs : {n} (* _ *)'a list) return (* _ *)'b using $(m + 2) * $n =
            case xs of
                Nil => y
              | Cons (x, xs) => foldl (f (x, y), xs)
    in
        foldl
    end

absidx h : BigO 2 (fn m n => $m * $n)(* _ *) with
val ['a 'b] foldl =
 fn {m : Nat} (f : 'a * 'b -- $m --> 'b) =>
    let
        fun foldl {n : Nat} (y : (* _ *)'b, xs : {n} (* _ *)'a list) return (* _ *)'b using h m n =
            case xs of
                Nil => y
              | Cons (x, xs) => foldl (f (x, y), xs)
    in
        foldl
    end
end

absidx h : BigO 2 (fn m n => $m * $n)(* _ *) with
val ['a 'b] foldl =
 fn {m : Nat} (f : 'a * 'b -- $m --> 'b) =>
    let
        fun foldl {n : Nat} y (xs : {n} (* _ *)'a list) return (* _ *)'b using h m n =
            case xs of
                Nil => y
              | Cons (x, xs) => foldl (f (x, y)) xs
    in
        foldl
    end
end

