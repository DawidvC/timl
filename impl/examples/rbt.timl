(* color: true=Black | false=Red *)
datatype {Nat} {Bool} 'a rbt =
         Leaf of {1} {true} 'a rbt
       | Black {lc : Bool} {rc : Bool} {bh : Nat} of {bh} {lc} 'a rbt * 'a * {bh} {rc} 'a rbt --> {bh + 1} {true} 'a rbt
       | Red {bh : Nat} of {bh} {true} 'a rbt * 'a * {bh} {true} 'a rbt --> {bh} {false} 'a rbt

datatype {Nat} 'a violation =
         ViolateLeft {rc : Bool} {bh : Nat} of {bh} {false} 'a rbt * 'a * {bh} {rc} 'a rbt --> {bh} 'a violation
       | ViolateRight {lc : Bool} {bh : Nat} of {bh} {lc} 'a rbt * 'a * {bh} {false} 'a rbt --> {bh} 'a violation
                                                                             
fun balance_left ['a] {bh : Nat} {rc : Bool} (left : {bh} 'a violation) (center as z) (right as d : {bh} {rc} 'a rbt) return {bh + 1} {false} 'a rbt =
    case left of
        ViolateLeft (Red (a, x, b), y, c) =>
        Red (Black (a, x, b), y, Black (c, z, d))
      | ViolateRight (a, x, Red (b, y, c)) =>
        Red (Black (a, x, b), y, Black (c, z, d))
      | _ => never
               
fun balance_right ['a] {bh : Nat} {lc : Bool} (left as a : {bh} {lc} 'a rbt) (center as x) (right : {bh} 'a violation) return {bh + 1} {false} 'a rbt =
    case right of
        ViolateLeft (Red (b, y, c), z, d) =>
        Red (Black (a, x, b), y, Black (c, z, d))
      | ViolateRight (b, y, Red (c, z, d)) =>
        Red (Black (a, x, b), y, Black (c, z, d))
      | _ => never

datatype {Bool} ibool =
         itrue of {true} ibool
         | ifalse of {false} ibool

(* arbt: 'almost' red black tree, except that wellredness may be violated between root and one of its children *)
datatype {Nat} {Bool (*color*)} {Bool (*is already good?*)} 'a arbt =
         Good {color : Bool} {bh : Nat} of {color} ibool * {bh} {color} 'a rbt --> {bh} {color} {true} 'a arbt
       | Bad {bh : Nat} of {bh} 'a violation --> {bh} {false} {false} 'a arbt

datatype {Nat} {Bool} 'a ins_result =
         InsResult {input_color : Bool} {bh : Nat} {output_color : Bool} {is_good : Bool} {input_color = true -> is_good = true} of {bh} {output_color} {is_good} 'a arbt --> {bh} {input_color} 'a ins_result

datatype cmp_result = Equal | Less | Greater

fun cmp ['a] (x : 'a, y : 'a) = Equal using 7.0

absidx g : BigO 1 (fn n => $n) (* = fn n => 6.0 * $n *) with                                   
fun ins ['a] {input_color : Bool} {bh : Nat} (tr : {bh} {input_color} 'a rbt) (new : 'a) return {bh} {input_color} 'a ins_result using (* 6.0 * $ *)g (2 * bh + b2n (not input_color)) =
    case tr of
        Leaf =>
        let
          val tr = Red (Leaf, new, Leaf)
          val tr = Good (ifalse, tr)
          val tr = InsResult tr
        in
          tr
        end
      | Red (left, center, right) =>
        (case cmp (new, center) of
             Equal => InsResult (Good (ifalse, Red (left, new, right)))
           | Less =>
             let
               val (InsResult left) = ins left new
             in
               case left of
                   Good (color, left) =>
                   (case color of
                        ifalse =>
                        InsResult (Bad (ViolateLeft (left, center, right)))
                      | itrue =>
                        InsResult (Good (ifalse, Red (left, new, right)))
                   )
                 | _ => never
             end
           | Greater =>
             let
               val (InsResult right) = ins right new
             in
               case right of
                   Good (color, right) =>
                   (case color of
                        ifalse =>
                        InsResult (Bad (ViolateRight (left, center, right)))
                      | itrue =>
                        InsResult (Good (ifalse, Red (left, new, right)))
                   )
                 | _ => never
             end
        )
      | Black (left, center, right) =>
        (case cmp (new, center) of
             Equal =>
             InsResult (Good (itrue, Black (left, new, right)))
           | Less => 
             let
               val (InsResult left) = ins left new
             in
               case left of
                   Good (_, left) =>
                   InsResult (Good (itrue, Black (left, center, right)))
                 | Bad left =>
                   InsResult (Good (ifalse, balance_left left center right))
             end
           | Greater => 
             let
               val (InsResult right) = ins right new
             in
               case right of
                   Good (_, right) =>
                   InsResult (Good (itrue, Black (left, center, right)))
                 | Bad right =>
                   InsResult (Good (ifalse, balance_right left center right))
             end
        )
end

fun blacken_root ['a] {bh : Nat} (tr : {bh} {false} 'a rbt) return {bh + 1} {true} 'a rbt =
    case tr of
        Red (l, c, r) => Black (l, c, r)
      | _ => never

(* final packaging: root must be black *)
datatype {Nat} 'a rb_tree =
         RBTree {bh : Nat} of {bh} {true} 'a rbt --> {bh} 'a rb_tree
                                   
datatype {Nat} 'a rbt_may_grow_one =
         RbtMayGrowOne {bh : Nat} {bh' : Nat | bh' = bh \/ bh' = bh + 1} of {bh'} 'a rb_tree --> {bh} 'a rbt_may_grow_one

absidx g : BigO 1 (fn n => $n) with
fun insert ['a] {bh : Nat} (tr : {bh} 'a rb_tree) new return {bh} 'a rbt_may_grow_one using g bh =
    case tr of
        RBTree tr =>
        case ins tr new of
            InsResult (Good (color, tr)) =>
            (case color of
                 itrue => RbtMayGrowOne (RBTree tr)
               | ifalse => RbtMayGrowOne (RBTree (blacken_root tr))
            )
          | _ => never
end

absidx g : BigO 1 (fn n => $n) with
fun search ['a 'b] {color : Bool} {bh : Nat} (tr : {bh} {color} ('a * 'b) rbt) k return 'b option using g (2 * bh + b2n (not color)) =
    case tr of
        Leaf => NONE
      | Red (left, (k', v), right) =>
        (case cmp (k, k') of
             Equal => SOME v
           | Less => search left k
           | Greater => search right k
        )
      | Black (left, (k', v), right) =>
        (case cmp (k, k') of
             Equal => SOME v
           | Less => search left k
           | Greater => search right k
        )
end

absidx g : BigO 1 (fn n => $n) with
fun lookup ['a 'b] {bh : Nat} (tr : {bh} ('a * 'b) rb_tree) k return 'b option using g bh =
    case tr of
        RBTree tr => search tr k
end
