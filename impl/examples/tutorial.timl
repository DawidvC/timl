datatype {Nat} 'a list =
         NilI of unit -> {0} 'a list
         | ConsI of {n' : Nat} 'a * {n'} 'a list -> {n' + 1} 'a list

val ['a] ['b] map = 
 fn {m : Time} (f : 'a -- m --> 'b) =>
    let
        fun map {n : Nat} (ls : {n} _ list) return {n} _ list |> (m + 2.0) * $n =
            case ls return {n} _ list of
                NilI => NilI
              | ConsI {n'} (x, xs) => ConsI {_} (f x, map {_} xs) |> (m + 2.0) * $n
    in
        map
    end

