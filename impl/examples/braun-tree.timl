datatype {Nat} 'a braun_tree =
         Leaf of {0} 'a braun_tree
       | Node {n : Nat} of 'a * {ceil ($n/2)} 'a braun_tree * {floor ($n/2)} 'a braun_tree --> {n+1} 'a braun_tree

fun lt ['a] (x : 'a, y : 'a) = false using 7.0

fun decide ['a] {m : Time} (lt : 'a * 'a -- m --> bool) (x, y) =
    case lt (x, y) of
        true => (x, y)
      | false => (y, x)

absidx Tinsert : BigO 1 (fn n => log2 $n) with
fun insert ['a] {n : Nat} (tr : {n} 'a braun_tree) x return {n + 1} 'a braun_tree using Tinsert n =
    case tr of
        Leaf => Node (x, Leaf, Leaf)
      | @Node {n'} (y, l, r) =>
        let
          val (smaller, bigger) = decide lt (x, y)
        in
          @Node {n' + 1} (smaller, insert r bigger, l)
        end
end

absidx T : Time with
fun peek ['a] {n : Nat} (tr : {n + 1} 'a braun_tree) return using T =
    case tr of
        Node (x, _, _) => x
      | Leaf => never
end

absidx T : Time with
fun peek_option ['a] {n : Nat} (tr : {n} 'a braun_tree) return 'a option using T =
    case tr of
        Leaf => NONE
      | Node (x, _, _) => SOME x
end

absidx Tpop : BigO 1 (* (fn m n => $m * log2 $n) *) _ with
fun pop ['a] {n : Nat} (tr : {n + 1} 'a braun_tree) return 'a * {n} 'a braun_tree using Tpop n =
    case tr of
        Node (x, l, r) =>
        (case (l, r) of
             (Leaf, Leaf) => (x, Leaf)
           | (Node _, Leaf) =>
             let
               val (y, l) = pop l
             in
               (x, Node (y, r, l))
             end
           | (Node _, Node _) =>
             let
               val lx = peek l
               val rx = peek r
             in
               case lt (lx, rx) of
                   true =>
                   let
                     val (_, l) = pop l
                   in
                     (x, Node (lx, r, l))
                   end
                 | false =>
                   let
                     val (_, l) = pop l
                     val (_, r) = pop r
                   in
                     (x, Node (rx, insert r lx, l))
                   end
             end
           | _ => never
        )
      | Leaf => never
end

