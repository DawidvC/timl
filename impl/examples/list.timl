structure List = struct

datatype {Nat} 'a list =
         Nil of {0} 'a list
       | Cons {n' : Nat} of 'a * {n'} 'a list --> {n' + 1} 'a list

absidx T_map : BigO 2 (fn m n => $m * $n) with
fun map ['a 'b] {m : Nat} (f : 'a -- $m --> 'b) =
    let
      fun map {n : Nat} (ls : {n} 'a(* _ *) list) return {n} 'b(* _ *) list using T_map m n =
          case ls of
              Nil => Nil
            | Cons (x, xs) => Cons (f x, map xs)
    in
      map
    end
end

absidx T_foldl : BigO 2 (fn m n => $m * $n) with
fun foldl ['a 'b] {m n : Nat} (f : 'a * 'b -- $m --> 'b) y (xs : {n} 'a list) return 'b using T_foldl m n =
        case xs of
            [] => y
          | x :: xs => foldl f (f (x, y)) xs
end

fun hd ['a] {n: Nat | n > 0} (ls: {n} 'a list) =
    case ls of
        x :: _ => x
      | _ => never
       
end
