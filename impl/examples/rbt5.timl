structure Rbt = struct

(* Red-black tree with invariant for well-red-ness and black-height-blance. Size-height-ratio can be derived from well-red-ness and black-height-blance. *)

open Bool
       
datatype {Nat} {Nat} lemma1 =
         Lemma1 {a b : Nat} {2 ^ a <= b + 1 -> a <= ceil (log2 $(b + 1))} of {b} {a} lemma1

fun lemma1 {a b : Nat} () return {b} {a} lemma1 =
    @Lemma1 {a} {b} {admit}
      
datatype {Bool} color =
         Black of {true} color
         | Red of {false} color

datatype {Nat(*black height*)} {Bool} {Nat(*size*)} 'a rbt =
         Leaf of {0} {true} {0} 'a rbt
       | Node {lcolor color rcolor : Bool}
              {lsize rsize bh : Nat}
              {color = false -> lcolor = true /\ rcolor = true }
              {2 ^ (bh + b2n (not lcolor) + 1) <= 2 * (lsize + 1) /\ 2 * (lsize + 1) <= 2 ^ (2 * bh + b2n (not lcolor) + 1)}
              {2 ^ (bh + b2n (not rcolor) + 1) <= 2 * (rsize + 1) /\ 2 * (rsize + 1) <= 2 ^ (2 * bh + b2n (not rcolor) + 1)}
         of {color} color * {bh} {lcolor} {lsize} 'a rbt * 'a * {bh} {rcolor} {rsize} 'a rbt --> {bh + b2n color} {color} {lsize + 1 + rsize} 'a rbt

datatype {Nat} {Bool} {Nat} size_good =
         SizeGood {color : Bool} {size bh : Nat}
                  {2 ^ (bh + b2n (not color) + 1) <= 2 * (size + 1) /\ 2 * (size + 1) <= 2 ^ (2 * bh + b2n (not color) + 1)}
         of {bh} {color} {size} size_good
                 
fun rbt_size_good ['a] {color : Bool} {size bh : Nat} (tr : {bh} {color} {size} 'a rbt) return {bh} {color} {size} size_good =
    case tr of
        Leaf => SizeGood
      | Node (color, _, _, _) =>
        case color of
            Black => SizeGood
          | Red => SizeGood
                  
datatype {Nat} {Nat} 'a violation =
         ViolateLeft {lsize rsize bh : Nat}
         of {bh} {false} {lsize} 'a rbt * 'a * {bh} {true} {rsize} 'a rbt --> {bh} {lsize + 1 + rsize} 'a violation
       | ViolateRight {lsize rsize bh : Nat}
         of {bh} {true} {lsize} 'a rbt * 'a * {bh} {false} {rsize} 'a rbt --> {bh} {lsize + 1 + rsize} 'a violation

fun balance_left ['a] {rcolor : Bool} {lsize rsize bh : Nat}
                 (left : {bh} {lsize} 'a violation)
                 (center as z : 'a)
                 (right as d : {bh} {rcolor} {rsize} 'a rbt)
                 return {bh + 1} {false} {lsize + 1 + rsize} 'a rbt =
    case left of
        ViolateLeft (Node (Red, a, x, b), y, c) =>
        let
          val SizeGood _ = rbt_size_good c
          val SizeGood _ = rbt_size_good d
        in
          Node (Red, Node (Black, a, x, b), y, Node (Black, c, z, d))
        end
      | ViolateRight (a, x, Node (Red, b, y, c)) =>
        let
          val SizeGood _ = rbt_size_good a
          val SizeGood _ = rbt_size_good d
        in
          Node (Red, Node (Black, a, x, b), y, Node (Black, c, z, d))
        end
      | _ => never

fun balance_right ['a] {lcolor : Bool} {lsize rsize bh : Nat}
                  (left as a : {bh} {lcolor} {lsize} 'a rbt)
                  (center as x : 'a)
                  (right : {bh} {rsize} 'a violation)
                  return {bh + 1} {false} {lsize + 1 + rsize} 'a rbt =
    case right of
        ViolateLeft (Node (Red, b, y, c), z, d) =>
        let
          val SizeGood _ = rbt_size_good a
          val SizeGood _ = rbt_size_good d
        in
          Node (Red, Node (Black, a, x, b), y, Node (Black, c, z, d))
        end
      | ViolateRight (b, y, Node (Red, c, z, d)) =>
        let
          val SizeGood _ = rbt_size_good a
          val SizeGood _ = rbt_size_good b
        in
          Node (Red, Node (Black, a, x, b), y, Node (Black, c, z, d))
        end
      | _ => never
               
(* arbt: 'almost' red black tree, except that wellredness may be violated between root and one of its children *)
datatype {Nat} {Bool} {Bool (*is already good?*)} {Nat} 'a arbt =
         Good {color : Bool} {size bh : Nat}
         of {color} color * {bh} {color} {size} 'a rbt --> {bh} {color} {true} {size} 'a arbt
       | Bad {size bh : Nat}
         of {bh} {size} 'a violation --> {bh} {false} {false} {size} 'a arbt

datatype {Nat} {Bool} {Nat} 'a ins_result =
         InsResult {input_color output_color is_good : Bool}
                   {input_size output_size bh : Nat}
                   {input_color = true -> is_good = true}
                   {output_size = input_size \/ output_size = input_size + 1}
         of {bh} {output_color} {is_good} {output_size} 'a arbt --> {bh} {input_color} {input_size} 'a ins_result

datatype cmp_result = Equal | Less | Greater

absidx m : Time with
(* idx m : Time = _ *)
fun cmp ['v] (x : 'v, y : 'v) return using m = Equal using 7.0
end

absidx T_ins : BigO 1 (fn n => $n) (* = fn n => 6.0 * $n *) with                                   
fun ins ['k 'v] {input_color : Bool} {input_size bh : Nat}
        (tr : {bh} {input_color} {input_size} ('k * 'v) rbt) (new as (k, _))
        return {bh} {input_color} {input_size} ('k * 'v) ins_result using (* 6.0 * $ *)T_ins (2 * bh + b2n (not input_color)) =
    case tr of
        Leaf =>
        let
          val tr = Node (Red, Leaf, new, Leaf)
          val tr = Good (Red, tr)
          val tr = InsResult tr
        in
          tr
        end
      | Node (Red, left, center as (k', _), right) =>
        (case cmp (k, k') of
             Equal => InsResult (Good (Red, Node (Red, left, new, right)))
           | Less =>
             let
               val (InsResult left) = ins left new
             in
               case left of
                   Good (color, left) =>
                   (case color of
                        Red =>
                        InsResult (Bad (ViolateLeft (left, center, right)))
                      | Black =>
                        let
                          val SizeGood _ = rbt_size_good left
                          val SizeGood _ = rbt_size_good right
                        in
                          (* never *)
                          InsResult (Good (Red, Node (Red, left, center(* new *)(* (Zero, v) *), right)))
                                    (* InsResult (Good (Red, Node (Red, left, new, right))) *)
                        end
                   )
                 | _ => never
             end
           | Greater =>
             let
               val (InsResult right) = ins right new
             in
               case right of
                   Good (color, right) =>
                   (case color of
                        Red =>
                        InsResult (Bad (ViolateRight (left, center, right)))
                      | Black =>
                        let
                          val SizeGood _ = rbt_size_good left
                          val SizeGood _ = rbt_size_good right
                        in
                          InsResult (Good (Red, Node (Red, left, center, right)))
                        end
                   )
                 | _ => never
             end
        )
      | Node (Black, left, center as (k', _), right) =>
        (case cmp (k, k') of
             Equal =>
             InsResult (Good (Black, Node (Black, left, new, right)))
           | Less => 
             let
               val (InsResult left) = ins left new
             in
               case left of
                   Good (_, left) =>
                   let
                     val SizeGood _ = rbt_size_good left
                     val SizeGood _ = rbt_size_good right
                   in
                     InsResult (Good (Black, Node (Black, left, center, right)))
                   end
                 | Bad left =>
                   InsResult (Good (Red, balance_left left center right))
             end
           | Greater => 
             let
               val (InsResult right) = ins right new
             in
               case right of
                   Good (_, right) =>
                   let
                     val SizeGood _ = rbt_size_good left
                     val SizeGood _ = rbt_size_good right
                   in
                     InsResult (Good (Black, Node (Black, left, center, right)))
                   end
                 | Bad right =>
                   InsResult (Good (Red, balance_right left center right))
             end
        )
end

(* simplify time complexity *)
absidx T_insert_rbt' : BigO 1 (fn n => $n) with                                   
fun insert_rbt' ['k 'v] {color : Bool} {size bh : Nat}
        (tr : {bh} {color} {size} ('k * 'v) rbt) new
        return using T_insert_rbt' bh =
    ins tr new
end

absidx T_insert_rbt : BigO 1 (fn n => log2 $n) with                                   
fun insert_rbt ['k 'v] {color : Bool} {size bh : Nat}
        (tr : {bh} {color} {size} ('k * 'v) rbt) new
        return using T_insert_rbt size =
    let
      val SizeGood _ = rbt_size_good tr
      val Lemma1 _ = @lemma1 {bh} {size} ()
    in
      insert_rbt' tr new using 2.0 + T_insert_rbt' (ceil (log2 $(size + 1)))
    end
end

fun blacken_root ['a] {size bh : Nat} (tr : {bh} {false} {size} 'a rbt) return {bh + 1} {true} {size} 'a rbt =
    case tr of
        Node (Red, l, c, r) => Node (Black, l, c, r)
      | _ => never

(* final packaging: root must be black *)
datatype {Nat} 'a rb_tree =
         RBTree {size bh : Nat} of {bh} {true} {size} 'a rbt --> {size} 'a rb_tree

datatype {Nat} 'a rbt_may_grow_one =
         RbtMayGrowOne {size : Nat} {size' : Nat | size' = size \/ size' = size + 1} of {size'} 'a rb_tree --> {size} 'a rbt_may_grow_one

absidx T_insert : BigO 1 (fn n => log2 $n) with
fun insert ['k 'v] {size : Nat} (tr : {size} ('k * 'v) rb_tree) new return {size} ('k * 'v) rbt_may_grow_one using T_insert size =
    case tr of
        RBTree tr =>
        case insert_rbt tr new of
            InsResult (Good (color, tr)) =>
            (case color of
                 Black => RbtMayGrowOne (RBTree tr)
               | Red => RbtMayGrowOne (RBTree (blacken_root tr))
            )
          | _ => never
end

absidx T_lookup_rbt' : BigO 1 (fn n => $n) with
fun lookup_rbt' ['k 'v] {color : Bool} {size bh : Nat} (tr :{bh} {color} {size} ('k * 'v) rbt) k return 'v option using T_lookup_rbt' (2 * bh + b2n (not color)) =
    case tr of
        Leaf => NONE
      | Node (_, left, (k', v), right) =>
        case cmp (k, k') of
            Equal => SOME v
          | Less => lookup_rbt' left k
          | Greater => lookup_rbt' right k
end

(* simplify time complexity *)
absidx T_lookup_rbt : BigO 1 (fn n => $n) with                                   
fun lookup_rbt ['k 'v] {color : Bool} {size bh : Nat}
        (tr : {bh} {color} {size} ('k * 'v) rbt) k
        return using T_lookup_rbt bh =
    lookup_rbt' tr k
end

absidx T_lookup : BigO 1 (fn n => log2 $n) with
fun lookup ['k 'v] {size : Nat} (tr : {size} ('k * 'v) rb_tree) k return 'v option using T_lookup size =
    case tr of
        @RBTree {_ bh} tr =>
        let
          val SizeGood _ = rbt_size_good tr
          val Lemma1 _ = @lemma1 {bh} {size} ()
        in
          lookup_rbt tr k using 2.0 + T_lookup_rbt (ceil (log2 $(size + 1)))
        end
end

end
