datatype {Nat} 'a list =
         Nil of {0} 'a list
         | Cons {n : Nat} of 'a * {n} 'a list --> {n + 1} 'a list

absidx gg : {gg : Fun 1 | gg O (fn n => $n)} with
val g =
 fn {n : Nat} (xs : {n} int list) return |> gg n => xs
end

absidx hh : {hh : Fun 1 | hh O (fn n => 1.0)} with
val h =
 fn {n : Nat} (xs : {n} int list) return |> hh n => xs
end

absidx ff : {ff : Fun 1 | ff O _} with
val f =
 fn {n : Nat} (xs : {n} int list) return |> ff n =>
    let
        val xs = g {_} xs
        val xs = h {_} xs
    in
        xs
    end
end

absidx {T : Fun 1 | T O _} with
fun ['a] ['b] map (f : 'a -- 5.0 --> 'b) =
    let
      fun map {n : Nat} (xs : {n} 'a list) return using T n =
          case xs return {n} _ list using T n of
              Nil => Nil
            | Cons {_} (x, xs) =>
              Cons {_} (f x, map {_} xs)
    in
      map
    end
end      

fun ['a] split {n : Nat} (xs : {n} 'a list) return {ceil ($n/2)} _ list * {floor ($n/2)} _ list using $n =
    case xs return {ceil ($n/2)} _ list * {floor ($n/2)} _ list using $n of
        Nil => (Nil, Nil)
      | Cons {_} (x, Nil) => (xs, Nil)
      | Cons {_} (x1, Cons {_} (x2, xs)) =>
        case split {_} xs of
            (xs1, xs2) => (Cons {_} (x1, xs1), Cons {_} (x2, xs2))

datatype bool = true | false

absidx {T2 : Fun 1 | T2 O _} with
fun ['a] merge (lt : 'a * 'a -- 8.0 --> bool) =
    let
      fun merge {n1 : Nat} {n2 : Nat} (xs : {n1} _ list) (ys : {n2} _ list) return {n1 + n2} _ list using T2 (n1 + n2) =
          case (xs, ys) return {n1 + n2} _ list using T2 (n1 + n2) of
              (Nil, _) => ys
            | (_, Nil) => xs
            | (Cons {n1'} (x, xs'), Cons {n2'} (y, ys')) =>
              case lt (x, y) return using 2.0 + T2 (n1' + n2' + 1) of
                  true => Cons {_} (x, merge {_} {_} xs' ys)
                | false => Cons {_} (y, merge {_} {_} xs ys')
    in
      merge
    end
end

absidx {T3 : Fun 1 | T3 O _} with
fun ['a] msort (lt : 'a * 'a -- _ --> bool) =
    let
      fun msort {n : Nat} (xs : {n} 'a list) return {n} _ list using T3 n =
          case xs of
              Nil => xs
            | Cons {_} _ =>
              case split {_} xs of
                  (xs1, xs2) => merge lt {_} {_} (msort {_} xs1) (msort {_} xs2)
    in
      msort
    end
end
