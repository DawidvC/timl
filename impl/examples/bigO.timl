datatype {Nat} 'a list =
         nil of unit -> {0} 'a list
         | cons of {n : Nat} 'a * {n} 'a list -> {n + 1} 'a list

val g =
 fn {n : Nat} (xs : {n} int list) return |> 0.0 => xs

(* val idx c1 : Profile = _ *)

(* val g = *)
(*  fn {n : Nat} (xs : {n} int list) |> O c1 $n => xs *)

(* val idx c2 : Profile = _ *)

(* val h = *)
(*  fn {n : Nat} (xs : {n} int list) |> O c2 $1 => xs *)

(* val idx c3 : Profile = _ *)

(* val f = *)
(*  fn {n : Nat} (xs : {n} int list) |> O c3 $n => *)
(*     let *)
(*         val xs = g _ xs *)
(*         val xs = h _ xs *)
(*     in *)
(*         xs *)
(*     end *)

