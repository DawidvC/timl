(type (List (fn (A : *) (rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) ))

(let (nil (fn {A : *} (fold ((inl (pack (tt : {U : unit | (=n (0 : nat) (0 : nat))}) tt (exists (U : { U : unit | (=n (0 : nat) (0 : nat))}) Unit)) (exists (N : {N : nat | (=n (0 : nat) (+n N (1 : nat)))}) (*t A ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) (N : nat))))) : ((fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) (N : nat)))))) (0 : nat))) ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) (0 : nat)))))

(let (cons (fn {A : *} (fn {L : nat} (fn (h : A) (fn (t : ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) L)) (fold ((inr (pack (L : {N : nat | (=n (+n L (1 : nat)) (+n N (1 : nat)))}) (pair h t) (exists (N : {N : nat | (=n (+n L (1 : nat)) (+n N (1 : nat)))}) (*t A ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) (N : nat))))) (exists (U : {U : unit | (=n (+n L (1 : nat)) (0 : nat))}) Unit)) : ((fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) (N : nat)))))) (+n L (1 : nat)))) ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) (+n L (1 : nat)))))))))

(let (map (rec (map : (forall (A : *) (forall (B : *) (forall (M : nat) (forall (N : nat) (-> (-> A B (n2t M)) (-> ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) N) ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t B (T (N : nat))))))) N) (*r (n2t (+n M (3 : nat))) (n2t N))) 0.0)))))) (fn {A : *} (fn {B : *} (fn {M : nat} (fn {N : nat} (fn (f : (-> A B (n2t M))) (fn (ls : ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) N)) ( (case (x ((unfold ls) : (+t (exists (U : {U : unit | (=n N (0 : nat))}) Unit) (exists (K : {K : nat | (=n N (+n K (1 : nat)))}) (*t A ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t A (T (N : nat))))))) (K : nat))))))) ((nil [B]) : ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t B (T (N : nat))))))) N)) (unpack (L p x) (let (x (fst p)) (let (xs (snd p)) (((((cons [B]) [(L : nat)]) (f x)) ((((((map [A]) [B]) [M]) [(L : nat)]) f) xs)) : ((rec (T : (=> nat *)) (fn (L : nat) (+t (exists (U : {U : unit | (=n L (0 : nat))}) Unit) (exists (N : {N : nat | (=n L (+n N (1 : nat)))}) (*t B (T (N : nat))))))) N)))))) |> (*r (n2t (+n M (3 : nat))) (n2t N)))))))))))

  tt))))