(let (tru (inl tt Unit))
(let (fals (inr tt Unit))
(let (itru (inl (pack true tt (exists (B : {B : bool | (=n (b2n B) (1 : nat))}) Unit)) (exists (B : {B : bool | (=n (b2n B) (0 : nat))}) Unit)))
(let (ifals (inr (pack false tt (exists (B : {B : bool | (=n (b2n B) (0 : nat))}) Unit)) (exists (B : {B : bool | (=n (b2n B) (1 : nat))}) Unit)))
(let (none (fn {A : *} (inl tt A)))
(let (some (fn {A : *} (fn (x : A) (inr x Unit))))
(let (le (fn {A : nat} (fn {B : nat} (fn {P : { U : unit | (<=n A B) }} (pack P tt (exists (P : { U : unit | (<=n A B) }) Unit))))))
  tt)))))))